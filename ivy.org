:PROPERTIES:
:ID:       40de6793-5260-4ef0-9635-673c7c1ad3b8
:END:
#+TITLE: Ivy Completion Framework
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-04-04 Sun 17:36]
#+LAST_MODIFIED: [2021-07-19 Mon 09:43:23]
#+filetags: CONFIG SOFTWARE EMACS

* A Generic Completion Framework for Emacs
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-ivy.el :comments both :mkdirp yes
:END:
Ivy is a generic completion mechanism for [[id:cf447557-1f87-4a07-916a-160cfd2310cf][GNU/Emacs]]. Currently this is disabled...

* Configuration
** Counsel

=Counsel= on the other hand, provides replaces commands that replace the typical emacs commands.

#+begin_src emacs-lisp
(use-package counsel
  :disabled
  :bind (
         ("M-x"       . counsel-M-x)
         ("C-x TAB"   . counsel-semantic-or-imenu)
         ("C-x b"     . counsel-switch-buffer)
         ("M-y"       . counsel-yank-pop)
         ("M-o"       . counsel-recentf)
         ("M-m"       . counsel-evil-marks)
         ("C-x B"     . counsel-switch-buffer-other-window)
         ("C-x C-f"   . counsel-find-file)
         ("C-x C-M-f" . counsel-find-file-extern)
         ("C-x C-l"   . counsel-locate)
         ("C-x C-M-l" . counsel-locate-action-extern)
         ("C-x C-v"   . counsel-set-variable)
         ("C-c u"     . counsel-unicode-char)
         :map minibuffer-local-map
         ("C-r"       . 'counsel-minibuffer-history))
  :config (counsel-mode)
  )
#+end_src

** Ivy

=Ivy= is basically a completion framework. Its minimal but provides a simple but powerful menu that appears when switching files, opening buffers, etc.

#+begin_src emacs-lisp
(use-package ivy
  :after counsel
  :init
  (setq ivy-re-builders-alist `((t . ivy--regex-ignore-order)))
  (ivy-mode)
  :bind (:map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :custom
  (ivy-height 14)
  (ivy-wrap t)
  (ivy-fixed-height-minibuffer t)
  (ivy-count-format "[%d/%d] ")
  ;; Don't start searches with ^
  (ivy-initial-inputs-alist nil)
  ;; Show recentf files in buffer switch
  (ivy-use-virtual-buffers nil)
  ;; Show the full virtual file paths
  (ivy-virtual-abbreviate 'full)
  ;; Do not quit the minibuffer on delete-error
  (ivy-on-del-error-function #'ignore)
  ;; Enable ability to select the prompt
  (ivy-use-selectable-prompt t))
#+end_src

** Ivy Rich

=Ivy-Rich= provides extra columns in the counsel commands to get more information about each item during autocompletion.

#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev)
  :config
  (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer)
  :init (ivy-rich-mode 1))
#+end_src

Make ivy rich even more aesthetic with icons!

#+begin_src emacs-lisp
(use-package all-the-icons-ivy-rich
  :after (counsel counsel-projectile)
  :init (all-the-icons-ivy-rich-mode 1))
#+end_src

** Swiper

#+begin_src emacs-lisp
(use-package swiper
  :after counsel
  :custom (swiper-action-recent t)
  :bind (("C-s"   . swiper)
         ("C-M-s" . swiper-all)))
#+end_src

** Ivy Hydra

Ivy Hydra is part of the original repo, but its bundled seperately as a package. These lets us drop into a hydra session while we are in a ivy minibuffer.

#+begin_src emacs-lisp
(use-package ivy-hydra
  :after (ivy hydra))
#+end_src

** Ivy Bibtex

#+begin_src emacs-lisp
(use-package ivy-bibtex
  :after ivy
  :bind (("C-c n p"   . ivy-bibtex)
         ("C-c n C-p" . ivy-bibtex-with-notes))
  :custom
  (bibtex-completion-bibliography `((,(directory-files-recursively "~/org/papers/bib/" ""))))
  (bibtex-completion-library-path '("~/org/papers/doc/"))
  (bibtex-completion-notes-path "~/org/papers/notes/")
  ;; Style the output indicators
  (bibtex-completion-pdf-symbol "⌘")
  (bibtex-completion-notes-symbol "✎")
  ;; TODO Use bibtex-completion-additional-search-fields
  (bibtex-completion-notes-template-multiple-files
   (concat "#+TITLE: Notes on \"${title}\" by ${author-or-editor} (${year})\n"
           "#+AUTHOR: %n (%(user-login-name))\n"
           "#+ROAM_ALIAS:\n"
           "#+ROAM_TAGS:\n"
           "#+ROAM_KEY: cite:${=key=}\n"
           "#+CREATED: %U\n"
           "#+LAST_MODIFIED: %U\n"))
  )
#+end_src

** Counsel Projectile

Provides counsel interface for projectile.

#+begin_src emacs-lisp
(use-package counsel-projectile
  :after counsel
  :init (counsel-projectile-mode))
#+end_src

** Package Provides

#+begin_src emacs-lisp
(provide 'init-ivy)
#+end_src
