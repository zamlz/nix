:PROPERTIES:
:ID:       3c804840-b83d-4853-9b2d-66e47cdc483c
:ROAM_REFS: https://gnupg.org/
:END:
#+TITLE: GnuPG
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-29 Mon 18:57]
#+LAST_MODIFIED: [2021-07-19 Mon 09:43:23]
#+filetags: CONFIG SOFTWARE

#+DOWNLOADED: screenshot @ 2021-03-29 19:05:47
[[file:data/gnupg_logo.png]]

GnuPG is GNU's implementation of the OpenPGP standard.

* GPG Configuration
:PROPERTIES:
:header-args:conf: :tangle ~/.gnupg/gpg.conf :mkdirp yes :comments both
:END:

When outputting certificates, view user IDs distinctly from keys

#+begin_src conf
fixed-list-mode
#+end_src

Long keyids are more collision-resistant than short keyids. (Its trivial to make a key with any desired short keyid).

#+begin_src conf
keyid-format 0xlong
with-fingerprint
#+end_src

when multiple digests are supported by all recipients, choose the strongest one.

#+begin_src conf
personal-digest-preferences SHA512 SHA384 SHA256 SHA224
#+end_src

Preferences chosen for new keys should prioritize stronger algorithms.

#+begin_src conf
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 BZIP2 ZLIB ZIP Uncompressed
#+end_src

If you use a graphical environment (and even if you don't) you should be using an agent (similar arguments as [[https://www.debian-administration.org/users/dkg/weblog/64][https://www.debian-administration.org/users/dkg/weblog/64]])

#+begin_src conf
use-agent
#+end_src

You should always know at a glance which User IDs gpg thinks are legitimately bound to the keys in your keyring

#+begin_src conf
verify-options show-uid-validity
list-options show-uid-validity
#+end_src

when making an OpenPGP certification, use a stronger digest than the default SHA1.

#+begin_src conf
cert-digest-algo SHA256
#+end_src

Prevent version string from appearing in your signatures/public keys

#+begin_src conf
no-emit-version
#+end_src

* GPG Agent Configuration
:PROPERTIES:
:header-args:conf: :tangle ~/.gnupg/gpg-agent.conf :mkdirp yes :comments both
:END:

Some sane defaults here

#+begin_src conf
default-cache-ttl 600
max-cache-ttl 7200
#+end_src

This tells gpg to act as our [[id:1a2b90be-56f8-4b79-987c-e2696aabcba5][OpenSSH]] agent as well.

#+begin_src conf
enable-ssh-support
#+end_src

We also want to make use of my pinentry switcher. It switches which pinentry program to use based on context (environment variables).

#+begin_src conf
pinentry-program /usr/bin/pinentry-switcher
#+end_src

This means clients like Emacs can get the password in their own way and push to gpg. For this to work with emacs, set =epa-pinentry-mode= to ='loopback= in Emacs.

#+begin_src conf
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src

* Helper Scripts
:PROPERTIES:
:header-args:shell: :mkdirp yes :comments both :shebang #!/bin/sh
:END:
** GPG Lock

Here is a simple script I setup to quickly encrypt files with GPG. Can't say I use this too much now days, but I have it here because its something to have in my back pocket. It looks for =~/.gpg-id= for the key-id to use.

#+begin_src shell :tangle ~/.config/bin/gpg-lock
infile=$1
if [ -z "$(echo $infile | grep -E '.+\.gpg$')" ]; then
    gpg_id=$(cat ~/.gpg-id)
    outfile="${1}.gpg"
    gpg --output $outfile -r $gpg_id --encrypt $infile
else
    echo "Trying to encrypt already encrypted file"
fi
#+end_src

** GPG Unlock

Like the =gpg-lock= but instead this is for decrypting. Like before, it uses =~/.gpg-id= for the key-id to use.

#+begin_src shell :tangle ~/.config/bin/gpg-unlock
infile=$1
if [ -n "$(echo $infile | grep -E '.+\.gpg$')" ]; then
    outfile=$(echo ${infile} | sed -e 's/\.gpg$//g')
    gpg --output $outfile --decrypt $infile
else
    echo "Not a valid gpg locked file; Unable to unlock!"
fi
#+end_src
