#!/usr/bin/env sh

# A simple script that manages dotfiles repo and beyond
. $HOME/org/config/lib/repos
. $HOME/org/config/lib/shell/colorenv

help_prompt() {
    echo "Usage:"
}

# Print the locations of the repos
print_repo_dirs() {
    echo "DOTFILES_DIR       = ${DOTFILES_DIR}"

    echo "GTD_DIR            = ${GTD_DIR}"
    echo "NOTES_PUBLIC_DIR   = ${NOTES_PUBLIC_DIR}"
    echo "NOTES_PRIVATE_DIR  = ${NOTES_PRIVATE_DIR}"

    echo "PAPERS_DIR         = ${PAPERS_DIR}"
    echo "BLOG_DIR           = ${BLOG_DIR}"
    echo "BOOKMARKS_DIR      = ${BOOKMARKS_DIR}"
    echo "LEDGER_DIR         = ${LEDGER_DIR}"
    echo "PASSWORD_STORE_DIR = ${PASSWORD_STORE_DIR}"
}

# Configure dotfiles in the current directory
# (Used when installing new distros)
configure_dots() {
    HOME="${1:-$HOME}"

    # Setup custom color information
    echo "Setting up color info for xorg apps"
    $HOME/org/config/bin/xcolorscheme --set gruvbox-black
    $HOME/org/config/bin/colors --set hex

    # post setup messages
    echo ""
    echo ">     Make sure to tangle the dotfiles from emacs"
    echo ">         (hint: dots tangle)"
    echo ">     Colorscheme defaulted to gruvbox-black"
    echo ">     Make sure to populate lemonbar config"
}

# Run a git command (${2-}) in a given repo (${1})
run_git() {
    REPO_DIR=$1 && shift && GIT_ARGS=$@;
    echo -e "[${Bold}REPOSITORY: ${Purple}${REPO_DIR}${Rst}]"
    echo "git -C $REPO_DIR $GIT_ARGS"
    git -C $REPO_DIR $GIT_ARGS
}

run_git_over_all() {
    GIT_ARGS=$@;
    run_git ${DOTFILES_DIR} $GIT_ARGS;

    run_git ${GTD_DIR} $GIT_ARGS;
    run_git ${NOTES_PUBLIC_DIR} $GIT_ARGS;
    run_git ${NOTES_PRIVATE_DIR} $GIT_ARGS;

    run_git ${PAPERS_DIR} $GIT_ARGS;
    run_git ${BLOG_DIR} $GIT_ARGS;
    run_git ${BOOKMARKS_DIR} $GIT_ARGS;
    run_git ${LEDGER_DIR} $GIT_ARGS;
    run_git ${PASSWORD_STORE_DIR} $GIT_ARGS;
}

# Tangle is a literative programming contruct to write out
# all the configuration files from the org files.
tangle() {
    HOME="${1:-$HOME}"

    # Due to the nature of tangling, it can only writes files its
    # been configured to write to. It cannot delete files that
    # no longer exist. These folders are dynamics and thus need to
    # be cleared out before we attempt to tangle files to them
    # again.
    # > Add those directories here:
    rm -rf $HOME/.config/bin/
    rm -rf $HOME/.config/zsh/functions/
    rm -rf $HOME/.config/xresources.d/
    rm -rf $HOME/.config/xinitrc.d/
    rm -rf $HOME/.config/emacs/lisp/

    # iterate through all config *.org files and tangle them
    # Okay this can be way better. Instead of passing the file
    # one at a time, I should be getting the arguments in
    # a prewritten .el file where I output the iteratively.
    find $HOME/org/config -type f -name "*.org" | while read -r orgconf; do
        echo -e "[${Bold}CONFIG: ${Blue}$orgconf${Rst}]"
        emacs -Q --batch \
              --eval "(require 'org)" \
              --eval "(require 'cl-lib)" \
              --eval "(setq python-indent-guess-indent-offset-verbose nil)" \
              --eval "(setq python-indent-offset 4)" \
              --eval "(advice-add 'sh-set-shell :around (lambda (orig-fun &rest args) (cl-letf (((symbol-function 'message) #'ignore)) (apply orig-fun args))))" \
              --eval "(org-babel-tangle-file \"${orgconf}\")"
    done

    # post setup message
    echo ""
    echo "> If this is a system being tangled for the first time"
    echo "> make sure to rerun tangle after a fully configured"
    echo "> emacs is setup. (am I sure about this?)"
    echo "> "
    echo "> Also make sure to udpate the portage directory if this"
    echo "> is a Gentoo System and the Profile via =eselect profile="
}

if [ -z "$@" ]; then
    CMD="" && ARGS=""
else
    CMD=$1 && shift && ARGS=$@
fi

case "$CMD" in
    "status")       run_git_over_all "status --short" ;;
    "fetch")        run_git_over_all "fetch origin"   ;;
    "pull")         run_git_over_all "pull"           ;;
    "push")         run_git_over_all "push"           ;;
    "info")         print_repo_dirs                   ;;
    "configure")    configure_dots $ARGS              ;;
    "tangle")       tangle $ARGS                      ;;
    *)              run_git_over_all "status --short" ;;
esac
