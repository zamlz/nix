#!/bin/zsh

# Save X Window Terminal Info
# ---------------------------

# Load window info for given Target Window ID (used with pwdcfw.sh)
function load_window_info() {
    if [ -n "$DISPLAY" ] && [ -n "$TARGET_WINDOWID" ]; then
        source "/tmp/.wid_${TARGET_WINDOWID}"
        cd $WINDOW_PWD
        # Enter a Python Virtual Environment (if exists)
        if [ -n "$VIRTUAL_ENV" ]; then
            source ${VIRTUAL_ENV}/bin/activate
        fi
        unset TARGET_WINDOWID
    fi
}

# Save window info for given Window ID (used with pwdcfw.sh)
function save_window_info() {
    if [ -n "$DISPLAY" ] && [ -n "$WINDOWID" ]; then
        WINDOWID_FILE="/tmp/.wid_${WINDOWID}"
        echo "WINDOW_PWD='$(pwd)'" | tee ${WINDOWID_FILE}
        echo "VIRTUAL_ENV='${VIRTUAL_ENV}'" | tee -a ${WINDOWID_FILE}
    fi
}

# I don't know what to make of this. I thought I could have this code block in
# the =~/.zshenv= file but I was unable to do so as it causing many issues.
# Seems like it needs to be set during an interactive session. Very strange
# indeed. Essentially this configured what pinentry program should be used for
# GnuPG and OpenSSH. Furthermore, it also tells OpenSSH that it should look
# into GnuPG to get the ssh authentication key.
export GPG_TTY=$(tty)
export PINENTRY_USER_DATA='tty'
export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket);
