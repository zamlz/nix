:PROPERTIES:
:ID:       22d1d7d1-e024-4d8b-b63b-8358f4188dbe
:ROAM_REFS: https://github.com/yshui/picom
:END:
#+TITLE: Picom Compositor
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-29 Mon 19:22]
#+LAST_MODIFIED: [2021-07-19 Mon 09:43:22]
#+filetags: CONFIG SOFTWARE

Compton is a compositor for the [[id:9d70bac0-d660-47f4-b9bc-2f2531951f13][Xorg X11 Window System]].

* Configuration
:PROPERTIES:
:header-args:conf: :tangle ~/.config/picom/picom.conf :mkdirp yes :comments both
:header-args:shell: :tangle ~/.config/xinitrc.d/picom-refresh.sh :mkdirp yes :shebang #!/bin/sh :comments both
:END:
** Refresh Script

We'd like to make sure that =picom='s configuration is refreshed when our window manager is also refreshed. We have our window mannager configured so that it will refresh [[id:64c66aeb-1b89-4f51-8e36-2931fb24399a][xinit]] user-level scripts so let's create a simple one that performs the refresh. Make sure to =sleep 1= otherwise the new picom instance might not start up because it believes that another one is still alive.

#+begin_src shell
pkill -x picom
if [ -f "$HOME/.config/picom/picom.conf" ]; then
    sleep 1 && picom &
fi
#+end_src

** Backend

Backend to use: "xrender" or "glx".
GLX backend is typically much faster but depends on a sane driver.

#+begin_src conf
backend = "xrender";
#+end_src

** GLX backend

??? Don't remember what this does...

#+begin_src conf
glx-no-stencil = true;
#+end_src

GLX backend: Copy unmodified regions from front buffer instead of redrawing them all. My tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified, but a 20% increase when only 1/4 is. My tests on nouveau show terrible slowdown. Useful with --glx-swap-method, as well.

#+begin_src conf
glx-copy-from-front = false;
#+end_src

GLX backend: Avoid rebinding pixmap on window damage. Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe). Recommended if it works. /(Its turned off here)/

#+begin_src conf
# glx-no-rebind-pixmap = true;
#+end_src

** Shadows

Enabled client-side shadows on windows.

#+begin_src conf
shadow = true;
#+end_src

The blur radius for shadows. (default 12) The x offset for shadows. (default -15) The y offset for shadows. (default -15)

#+begin_src conf
shadow-radius = 5;
shadow-offset-x = -5;
shadow-offset-y = -5;
#+end_src

The translucency for shadows. (default .75)

#+begin_src conf
shadow-opacity = 0.5;
#+end_src

Set if you want different colour shadows

#+begin_src conf
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;
#+end_src

The shadow exclude options are helpful if you have shadows enabled. Due to the way compton draws its shadows, certain applications will have visual glitches (most applications are fine, only apps that do weird things with xshapes or argb are affected). This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.

#+begin_src conf
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "_GTK_FRAME_EXTENTS@:c"
];
#+end_src

Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)

#+begin_src conf
shadow-ignore-shaped = false;
#+end_src

** Opacity

Define opacity

#+begin_src conf
inactive-opacity = 1;
active-opacity = 1;
frame-opacity = 1;
inactive-opacity-override = false;
#+end_src

Dim inactive windows. (0.0 - 1.0)

#+begin_src conf
# inactive-dim = 0.2;
#+end_src

Do not let dimness adjust based on window opacity.

#+begin_src conf
# inactive-dim-fixed = true;
#+end_src

Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.

#+begin_src conf
# blur-background = true;
#+end_src

Blur background of opaque windows with transparent frames as well.

#+begin_src conf
# blur-background-frame = true;
#+end_src

Do not let blur radius adjust based on window opacity.

#+begin_src conf
blur-background-fixed = false;
#+end_src

#+begin_src conf
blur-background-exclude = [
    "window_type = 'dock'",
    "window_type = 'desktop'"
];
#+end_src

** Fading

Fade windows during opacity changes.

#+begin_src conf
fading = true;
#+end_src

The time between steps in a fade in milliseconds. (default 10).

#+begin_src conf
fade-delta = 4;
#+end_src

Opacity change between steps while fading in. (default 0.028).

#+begin_src conf
fade-in-step = 0.03;
#+end_src

Opacity change between steps while fading out. (default 0.03).

#+begin_src conf
fade-out-step = 0.03;
#+end_src

Fade windows in/out when opening/closing

#+begin_src conf
# no-fading-openclose = true;
#+end_src

Specify a list of conditions of windows that should not be faded.

#+begin_src conf
fade-exclude = [ ];
#+end_src

** Other

Try to detect WM windows and mark them as active.

#+begin_src conf
mark-wmwin-focused = true;
#+end_src

Mark all non-WM but override-redirect windows active (e.g. menus).

#+begin_src conf
mark-ovredir-focused = true;
#+end_src

Use EWMH =_NET_WM_ACTIVE_WINDOW= to determine which window is focused instead of using FocusIn/Out events. Usually more reliable but depends on a EWMH-compliant WM.

#+begin_src conf
use-ewmh-active-win = true;
#+end_src

Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.

#+begin_src conf
detect-rounded-corners = true;
#+end_src

Detect =_NET_WM_OPACITY= on client windows, useful for window managers not passing =_NET_WM_OPACITY= of client windows to frame windows. This prevents opacity being ignored for some apps. For example without this enabled my xfce4-notifyd is 100% opacity no matter what.

#+begin_src conf
detect-client-opacity = true;
#+end_src

Specify refresh rate of the screen. If not specified or 0, compton will try detecting this with X RandR extension.

#+begin_src conf
refresh-rate = 0;
#+end_src

Set VSync method. VSync methods currently available:
- none: No VSync
- drm: VSync with DRM_IOCTL_WAIT_VBLANK. May only work on some drivers.
- opengl: Try to VSync with SGI_video_sync OpenGL extension. Only work on some drivers.
- opengl-oml: Try to VSync with OML_sync_control OpenGL extension. Only work on some drivers.
- opengl-swc: Try to VSync with SGI_swap_control OpenGL extension. Only work on some drivers. Works only with GLX backend. Known to be most effective on many drivers. Does not actually control paint timing, only buffer swap is affected, so it doesnâ€™t have the effect of --sw-opti unlike other methods. Experimental.
- opengl-mswc: Try to VSync with MESA_swap_control OpenGL extension. Basically the same as opengl-swc above, except the extension we use.

/(Note some VSync methods may not be enabled at compile time.)/

#+begin_src conf
vsync = true;
#+end_src

Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing. Reported to have no effect, though.

#+begin_src conf
dbe = false;
#+end_src

Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games. Known to cause flickering when redirecting/unredirecting windows. paint-on-overlay may make the flickering less obvious.

#+begin_src conf
unredir-if-possible = true;
#+end_src

Specify a list of conditions of windows that should always be considered focused.

#+begin_src conf
focus-exclude = [ ];
#+end_src

Use =WM_TRANSIENT_FOR= to group windows, and consider windows in the same group focused at the same time.

#+begin_src conf
detect-transient = true;
#+end_src

Use =WM_CLIENT_LEADER= to group windows, and consider windows in the same group focused at the same time. =WM_TRANSIENT_FOR= has higher priority if --detect-transient is enabled, too.

#+begin_src conf
detect-client-leader = true;
#+end_src

** Window Type Settings

#+begin_src conf
wintypes:
{
    tooltip =
    {
        # fade: Fade the particular type of windows.
        fade = true;
        # shadow: Give those windows shadow
        shadow = false;
        # opacity: Default opacity for the type of windows.
        opacity = 0.85;
        # focus: Whether to always consider windows of this type focused.
        focus = true;
    };
};
#+end_src
