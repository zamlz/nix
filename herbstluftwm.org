:PROPERTIES:
:ID:       3c22f3fd-a4a1-4c08-9ee4-336d5c6491fa
:ROAM_REFS: https://herbstluftwm.org/
:ROAM_ALIASES: herbstluftwm
:END:
#+TITLE: Herbstluftwm Tiling Window Manager
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-29 Mon 18:35]
#+LAST_MODIFIED: [2021-07-19 Mon 09:43:24]
#+filetags: CONFIG SOFTWARE

#+DOWNLOADED: screenshot @ 2021-03-29 18:45:00
[[file:data/herbstluftwm_logo.png]]

Herbstlufwm is a manual tiling window manager for the [[id:9d70bac0-d660-47f4-b9bc-2f2531951f13][Xorg X11 Window System]]. Every workspace has a collection of frames and each of these frames contain a collection of windows. The frames can be manually tiled wheras the windows in the frames follow one of many tiling algorithms.

* Configuration
:PROPERTIES:
:header-args:shell: :tangle ~/.config/herbstluftwm/autostart :mkdirp yes :shebang #!/bin/sh :comments both
:END:
** Initial Configuration

Pretty straightforward stuff, setup logger, create a helper function,

#+begin_src shell
. $HOME/org/config/lib/shell/logger
LOGGER=$(get_logger herbstluftwm)
$LOGGER "Initializing herbstluftwm window manager"

hc() {
    herbstclient "$@"
}

hc emit_hook reload
#+end_src

** Source Xorg Universal Settings

We need to configure some X11 specific things that are universally needed regardless of window manager.

#+begin_src shell
$HOME/.config/bin/refresh-xinitrc.sh
#+end_src

** WM Custom Rules

Remove any prexisting rules

#+begin_src shell
hc unrule --all
#+end_src

Setup simple focus rules
- Focus *new* windows as they appear
- +Move all Xterm Windows to Tag 3+ /(I added this here simply for example's sake)/

#+begin_src shell
hc rule focus=on
#hc rule class=XTerm tag=3 # move all xterms to tag 3
#+end_src

Okay so probably the rules for the terminal are pointless here. Discord one actually doesn't work the way I want it to, but everything else here is pretty important. It makes sure that panels appear where they are suppose to and also ensures that popups are floating.

#+begin_src shell
hc rule class~'(.*[Rr]xvt.*|.*[Tt]erm|Konsole)' focus=on
hc rule class~'(Discord|DiscordCanary)' focus=off
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' pseudotile=on
hc rule windowtype='_NET_WM_WINDOW_TYPE_DIALOG' focus=on
hc rule windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off
#+end_src

** Keybindings

/You can use =xev= to identify X11 keys very easily./

*** Setup

Remove all existing keybinding; Use the super key as the main modifier.

#+begin_src shell
hc keyunbind --all
Super=Mod4
#+end_src

*** Reload WM and Close Window

Define the reload and close window keybindings.

#+begin_src shell
hc keybind $Super-Ctrl-Alt-r reload
hc keybind $Super-q close
#+end_src

*** Window Focus

Keybindings for changing the focused client

#+begin_src shell
hc keybind $Super-Left  focus left
hc keybind $Super-Down  focus down
hc keybind $Super-Up    focus up
hc keybind $Super-Right focus right
hc keybind $Super-h     focus left
hc keybind $Super-j     focus down
hc keybind $Super-k     focus up
hc keybind $Super-l     focus right
#+end_src

Keybindings for cycling the focused client

#+begin_src shell
hc keybind $Super-BackSpace   cycle_monitor
hc keybind $Super-Tab         cycle +1
hc keybind $Super-Shift-Tab   cycle_frame +1
hc keybind $Super-c           cycle_all +1
hc keybind $Super-i jumpto urgent
#+end_src

*** Window Movement

Keybindings for moving windows around.

#+begin_src shell
hc keybind $Super-Shift-Left  shift left
hc keybind $Super-Shift-Down  shift down
hc keybind $Super-Shift-Up    shift up
hc keybind $Super-Shift-Right shift right
hc keybind $Super-Shift-h     shift left
hc keybind $Super-Shift-j     shift down
hc keybind $Super-Shift-k     shift up
hc keybind $Super-Shift-l     shift right
#+end_src

*** Splitting Frames

Split the current frame by creating an empty frame in the specified direction.

#+begin_src shell
hc keybind $Super-u       split   bottom  0.5
hc keybind $Super-o       split   right   0.5
#+end_src

Split the current frame by exploding the current frame into multiple frames.

#+begin_src shell
hc keybind $Super-Control-space split explode
#+end_src

*** Resizing Frames

Define the step size and the keybindings for resizing frames.

#+begin_src shell
resizestep=0.01
hc keybind $Super-Control-h       resize left +$resizestep
hc keybind $Super-Control-j       resize down +$resizestep
hc keybind $Super-Control-k       resize up +$resizestep
hc keybind $Super-Control-l       resize right +$resizestep
hc keybind $Super-Control-Left    resize left +$resizestep
hc keybind $Super-Control-Down    resize down +$resizestep
hc keybind $Super-Control-Up      resize up +$resizestep
hc keybind $Super-Control-Right   resize right +$resizestep
#+end_src

*** Workspace Definitions (tags)

#+begin_src shell
tag_names=([1] [2] [3] [4] [5] [6] [7] [8] [9] [0])
tag_keys=( {1..9} 0 )

hc rename default "${tag_names[0]}" || true
for i in ${!tag_names[@]} ; do
    hc add "${tag_names[$i]}"
    key="${tag_keys[$i]}"
    if ! [ -z "$key" ] ; then
        hc keybind "$Super-$key" use_index "$i"
        hc keybind "$Super-Shift-$key" move_index "$i"
    fi
done
#+end_src

*** Workspace Movement

Jump to the previous workspace (tag).

#+begin_src shell
hc keybind $Super-grave use_previous
#+end_src

Move the next/previous workspace (tag).

#+begin_src shell
hc keybind $Super-bracketright use_index +1 --skip-visible
hc keybind $Super-bracketleft  use_index -1 --skip-visible
#+end_src

*** Layout Control

#+begin_src shell
hc keybind $Super-r remove
hc keybind $Super-s floating toggle
hc keybind $Super-f fullscreen toggle
hc keybind $Super-t pseudotile toggle
#+end_src

The following cycles through the available layouts within a frame, but skips layouts, if the layout change wouldn't affect the actual window positions. (I.e. if there are two windows within a frame, the grid layout is skipped.)

#+begin_src shell
hc keybind $Super-space                                                       \
            or , and . compare tags.focus.curframe_wcount = 2                 \
                     . cycle_layout +1 vertical horizontal max vertical grid  \
               , cycle_layout +1
#+end_src

*** Mouse Control

#+begin_src shell
hc mouseunbind --all
hc mousebind $Super-Button1 move
hc mousebind $Super-Button2 zoom
hc mousebind $Super-Button3 resize
#+end_src

*** Colorscheme Cylcing

Just some nice keybindings to cycle through existing colorschemes.

#+begin_src shell
hc keybind $Super-Ctrl-Alt-bracketright chain , \
        spawn $HOME/org/config/bin/xcolorscheme --next , reload

hc keybind $Super-Ctrl-Alt-bracketleft chain , \
        spawn $HOME/org/config/bin/xcolorscheme --prev , reload
#+end_src

** Theme Configuration
*** Source Colorscheme

#+begin_src shell
. $HOME/org/config/lib/shell/xrdb_colors
#+end_src

*** Reset Tiling and Floating states

#+begin_src shell
hc attr theme.tiling.reset 1
hc attr theme.floating.reset 1
#+end_src

*** Frame Appearance

#+begin_src shell
hc set frame_transparent_width 1
hc set frame_border_width 1
hc set frame_border_active_color $XBACKGROUND
hc set frame_border_normal_color $XBACKGROUND

hc set frame_bg_transparent 1
hc set frame_bg_normal_color $XBACKGROUND
hc set frame_bg_active_color $XCOLOR8

hc set always_show_frame 0
hc set frame_gap 16
hc set frame_padding 0
#+end_src

*** Window Appearance

#+begin_src shell
hc attr theme.active.outer_color $XBACKGROUND
hc attr theme.active.inner_color $XBACKGROUND

hc attr theme.normal.color $BLACK
hc attr theme.active.color $WHITE
hc attr theme.urgent.color orange

hc attr theme.border_width 9
hc attr theme.inner_width 3
hc attr theme.outer_width 4

hc attr theme.inner_color $XBACKGROUND
hc attr theme.outer_color $XBACKGROUND

hc attr theme.floating.border_width 9
hc attr theme.floating.inner_width 3
hc attr theme.floating.outer_width 4

hc attr theme.floating.outer_color $XBACKGROUND
hc attr theme.background_color '#141414'

hc set window_gap 12
hc set smart_window_surroundings 0
hc set smart_frame_surroundings 1
hc set mouse_recenter_gap 0
#+end_src

*** Tree View

#+begin_src shell
hc set tree_style '╾│ ├└╼─┐'
#+end_src

*** Montior Setup

Well monitor setup doesn't belong here really, but we're doing it here because we need to make space for the panels. /(Run the unlock command, just to be sure)/

#+begin_src shell
hc unlock
hc detect_monitors
#+end_src

*** Configure Panel Height

#+begin_src shell
PANEL_HEIGHT=20
for monitor in $(seq 0 2); do
    hc pad $monitor $PANEL_HEIGHT 0 $PANEL_HEIGHT 0
done
#+end_src

** Event Hooks

This starts a couple FIFO hooks so that [[id:e85b69f9-e309-4d26-9516-2e79524ffe00][Lemonbar]] can update the information on it's panel as effeciently as possible.

*** Event Hooks Startup Verification

#+begin_src shell
if [ $(pgrep -cx herbstclient) -gt 0 ]; then
    printf "The herbstluftwm event hooks for lemonbar are already running.\n" >&2
    $LOGGER "The herbstluftwm event hooks for lemonbar are already running."
    exit 1
fi
#+end_src

*** Event Hooks Trigger Definition

#+begin_src shell
WSP_TRIGGER="$HOME/.config/lemonbar/utils/trigger_fifos wsp"
WIN_TRIGGER="$HOME/.config/lemonbar/utils/trigger_fifos win"
WARG="'(focus_changed|window_title|panel_init)'"
#+end_src

*** Initialize Event Hooks

I don't remember why I commented one of the hooks out, oh thats rights, its because I'm not using the lemonbar xwindow module I made anymore.

#+begin_src shell
(herbstclient --idle       | while read -r line; do $WSP_TRIGGER; done) &
#(herbstclient --idle $WARG | while read -r line; do $WIN_TRIGGER; done) &

$LOGGER "All hook have been started"
#+end_src
