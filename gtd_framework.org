:PROPERTIES:
:ID:       09d3b373-11d0-43b7-a593-4118afa216ad
:ROAM_ALIASES: "GTD Method" "GTD Framework"
:END:
#+TITLE: Getting Things Done Framework
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 09:04]
#+LAST_MODIFIED: [2021-09-27 Mon 00:08:02]
#+filetags: CONFIG SOFTWARE GTD

* Useful Resources
- [[https://hamberg.no/gtd][GTD in 15 Minutes]]
- [[https://www.labri.fr/perso/nrougier/GTD/index.html][Get Things Done with Emacs]]

* What is GTD?

GTD is an acronym for "Getting Things Done". It is a framework for managing tasks and projects.

This document covers how I use GTD. We configure this framework for [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] which really just provides a barebones system for implementnig any task management system. So, what I've ended up doing is not exactly "GTD", but it is a variation that better suits my workflow.

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-gtd.el :comments both :mkdirp yes
:END:

** Setup Dependencies
First let's make sure we pull in [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] as we build of it's provided system.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

We define capture templates with [[id:f6caaa7b-aaa7-4ba1-9479-d599fcddb331][Doct]] here as well.

#+begin_src emacs-lisp
(require 'init-doct)
#+end_src

** Task Management Workflow

#+begin_src plantuml :file ./data/gtd_workflow.png :exports results
@startuml
'hide footbox
skinparam backgroundcolor transparent
skinparam monochrome reverse
skinparam shadowing false
hide empty description

[*] -> TODO
[*] --> BACKLOG
BACKLOG -> TODO
BACKLOG -> CANCELLED
TODO -> DONE
TODO -> BLOCKED
TODO --> CANCELLED
BLOCKED -> TODO
BLOCKED -> DONE
BLOCKED --> CANCELLED
DONE -> [*]
ROUTINE -> ROUTINE
@enduml
#+end_src

#+RESULTS:
[[file:./data/gtd_workflow.png]]

We can define a workflow that achieves this with the following set of sequences for =org-todo-keywords=.

#+begin_src emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "|" "DONE(d)")
        (sequence "|" "BACKLOG(b)")
        (sequence "|" "BLOCKED(B)")
        (sequence "|" "CANCELLED(c)")))
#+end_src

** Face Customization
We make use of =doom-themes= built in functions to get the primary colors of the current theme we are using. This also means that we have to use a =doom-theme=.

#+begin_src emacs-lisp
  ;; (defun zamlz/configure-org-todo-keyword-faces ()
  ;;   (interactive)
  ;;   (message "Configure org todo keyword faces")
  ;;   (let
  ;;       ((black   (doom-color 'bg))
  ;;        (grey    (doom-color 'base1))
  ;;        (red     (doom-color 'red))
  ;;        (orange  (doom-color 'orange))
  ;;        (green   (doom-color 'green))
  ;;        (yellow  (doom-color 'yellow))
  ;;        (blue    (doom-color 'blue))
  ;;        (violet  (doom-color 'violet))
  ;;        (cyan    (doom-color 'cyan))
  ;;        (white   (doom-color 'white)))
  ;;     (setq org-todo-keyword-faces
  ;;           `(("TODO"      . (:weight bold :foreground ,black  :background ,red))
  ;;             ("BLOCKED"   . (:weight bold :foreground ,black  :background ,yellow))
  ;;             ("BACKLOG"   . (:weight bold :foreground ,black  :background ,violet))
  ;;             ("CANCELLED" . (:weight bold :foreground ,black  :background ,grey))
  ;;             ("DONE"      . (:weight bold :foreground ,black  :background ,green))))))
#+end_src

Alternate simpler version

#+begin_src emacs-lisp
  (defun zamlz/configure-org-todo-keyword-faces ()
    (interactive)
    (message "Configure org todo keyword faces")
    (let ((red     "#cc241d")
          (green   "#98971a")
          (blue    "#458588")
          (magenta "#b16286")
          (yellow  "#d79921")
          (white   "#181818"))
      (setq org-todo-keyword-faces
            `(("TODO"      . (:weight bold :foreground ,white :background ,red))
              ("BLOCKED"   . (:weight bold :foreground ,white :background ,magenta))
              ("BACKLOG"   . (:weight bold :foreground ,white :background ,blue))
              ("CANCELLED" . (:weight bold :foreground ,white :background ,yellow))
              ("DONE"      . (:weight bold :foreground ,white :background ,green))))))
#+end_src

We should call this function in order to set those colors.

#+begin_src emacs-lisp
(zamlz/configure-org-todo-keyword-faces)
#+end_src

** Track Habits
Enables habit tracking in =org-mode= via =org-habit=.

#+begin_src emacs-lisp
(with-eval-after-load 'org
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-graph-column 40)
  (setq org-habit-preceding-days 28)
  (setq org-habit-following-days 7)
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-show-all-today t)
  (setq org-habit-show-done-always-green t))
#+end_src

** Capture Templates
Org mode template definitions in the doct format

#+begin_src emacs-lisp
(setq org-capture-templates
      (doct '(:group "ORG CAPTURE TEMPLATES"
                     :children
                     ((:group "GTD Tasks"
                              :file "tasks.org"
                              :headline "Inbox"
                              :type entry
                              :prepend t
                              :template ("* %{todo-state} %? :INBOX:"
                                         ":PROPERTIES:"
                                         ":created: %U"
                                         ":END:")
                              :children
                              (("[GTD] Todo Task" :keys "t" :todo-state "TODO")
                               ("[GTD] Someday/Maybe" :keys "s" :todo-state "SOMEDAY")
                               ("[GTD] Meeting/Appointment" :keys "m" :todo-state "MEETING")))
                      (:group "Journal"
                              :file "journal.org"
                              :datetree t
                              :type entry
                              :prepend t
                              :template ("* %U - %? %{journal-type}"
                                         ":PROPERTIES:"
                                         ":created: %U"
                                         ":END:")
                              :children
                              (("[Journal] Entry" :keys "j" :journal-type ":JOURNAL:")
                               ("[Journal] Recollection" :keys "r"
                                :journal-type ":RECOLLECTION:" :time-prompt t)
                               ("[Journal] Dream Entry" :keys "d" :journal-type ":DREAM:")
                               ("[Journal] Phone Call" :keys "p" :journal-type ":@PHONE:")))
                      ))))
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-gtd)
#+end_src
