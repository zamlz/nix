#+TITLE: Emacs Configuration
#+AUTHOR: Amlesh Sivanantham
#+CREATED:
#+STARTUP: content

* early-init.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/early-init.el :comments link :mkdirp yes
:END:

#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-

  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 0.6)

  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)

  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)

  ;; Disable GUI elements
  (setq use-file-dialog nil)

  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)

  ;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/init.el :comments link :mkdirp yes
:END:
** Customizations
*** Custom Variables
My personal information

#+BEGIN_SRC emacs-lisp
(defcustom zamlz/name "Amlesh Sivanantham"
	"My org directory"
	:type 'string
	:group 'zamlz)

(defcustom zamlz/email "zamlz@pm.me"
	"My email address"
	:type 'string
	:group 'zamlz)
#+END_SRC

My default font configuration

#+BEGIN_SRC emacs-lisp
(defcustom zamlz/default-font-family "Fira Code"
	"Default font family"
	:type 'string
	:group 'zamlz)

(defcustom zamlz/default-font-family-size 110
	"Font size for default font family"
	:type 'int
	:group 'zamlz)

(defcustom zamlz/variable-pitch-font-family "Sans Serif"
	"Default font family"
	:type 'string
	:group 'zamlz)

(defcustom zamlz/variable-pitch-font-family-size 110
	"Font size for default font family"
	:type 'int
	:group 'zamlz)
#+END_SRC

Org mode related variables

#+BEGIN_SRC emacs-lisp
(defcustom zamlz/org-directory (file-truename "~/org")
	"My org directory"
	:type 'string
	:group 'zamlz)
#+END_SRC

*** Environment Variables

Unfortunately, there are certain environment variables that need to be overwritten.

#+BEGIN_SRC emacs-lisp
(setenv "PINENTRY_USER_DATA" "rofi")
#+END_SRC

** Package Management System
*** Straight Package Manager 

=straight.el= is a modern and powerful package manager. Unfortunately,
it's not part of GNU/Emacs, so we need to bootstrap the package
manager manually.

#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
(bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
  (url-retrieve-synchronously
   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
   'silent 'inhibit-cookies)
(goto-char (point-max))
(eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth 1)
#+END_SRC

*** Use-package Wrapper 

=use-package= isn't a package manager, but rather a wrapper utility to
make package configuration self contained and easier to setup. We'll
be using it to interface with =straight.el=.

#+BEGIN_SRC emacs-lisp
(straight-use-package 'use-package)
(setq use-package-compute-statistics t)
#+END_SRC

Let's also install some packages that extend the =use-package=. This
package in particular let's us use the =:dminish= keyword in our package
definitions.

#+BEGIN_SRC emacs-lisp
;; This is a package that is used by use-package to diminish major modes
(use-package diminish)
#+END_SRC

** GNU/Emacs
*** Internals

#+BEGIN_SRC emacs-lisp
(use-package emacs
	:init
	;; User details
	(setq user-full-name zamlz/name)
	(setq user-mail-address zamlz/email)

	;; emacs internals
	(setq inhibit-startup-screen t)
	(setq initial-scratch-message nil)
	(setq sentence-end-double-space nil)
	(setq frame-resize-pixelwise t)
	(setq read-process-output-max (* 1024 1024)) ;; 1mb

	;; default to utf-8 for everything
	(set-charset-priority 'unicode)
	(setq locale-coding-system 'utf-8)
	(setq coding-system-for-read 'utf-8)
	(setq coding-system-for-write 'utf-8)
	(set-terminal-coding-system 'utf-8)
	(set-keyboard-coding-system 'utf-8)
	(set-selection-coding-system 'utf-8)
	(prefer-coding-system 'utf-8)
	(setq default-process-coding-system '(utf-8-unix . utf-8-unix))

	;; write over selected text on input
	(delete-selection-mode t)

	;; enable recent files mode
	(recentf-mode t)
	(setq recentf-exclude
				`(,(expand-file-name "straight/build/" user-emacs-directory)
					,(expand-file-name "eln-cache/" user-emacs-directory)
					,(expand-file-name "etc/" user-emacs-directory)
					,(expand-file-name "var/" user-emacs-directory)))

	;; don't want the ESC as a modifier
	(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

	;; Don't persist a custom file
	(setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
	(setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
	(setq enable-local-variables :all)     ; fix =defvar= warnings

	;; stop emacs for littering the file system with backup files
	(setq make-backup-files nil)
	(setq auto-save-default nil)
	(setq create-lockfiles nil)

	;; follow symlinks
	(setq vc-follow-symlinks t)

	;; disable gui fluff
	(when (window-system)
		(menu-bar-mode -1)
		(tool-bar-mode -1)
		(scroll-bar-mode -1))

	;; enable winner mode globally for undo/redo window layout changes
	(winner-mode t)

	;; display connected parenthesis
	(show-paren-mode t)

	;; Less noise when compiling elisp
	(setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
	(setq native-comp-async-report-warnings-errors nil)
	(setq load-prefer-newer t)

	;; cleanup the modeline
	(display-time-mode -1)

	(setq column-number-mode t)

	;; tab indentation
	(setq-default indent-tabs-mode t)
	(setq-default tab-width 2)

	;; ebanel indentation and completion using the tab key
	(setq tab-always-indent 'complete))
#+END_SRC

*** Garbage Collector Magic Hack

There seems to be a very interesting method of running GC in emacs
that doom uses. We shall install it and use it too.

#+BEGIN_SRC emacs-lisp
(use-package gcmh
	:demand
	:config
	(gcmh-mode 1))
#+END_SRC

** Keybindings
*** Leader Keybindings with General
**** General Keybinding System

General let's use use leader keys to bind things. Instead of having to
do /crazy control sequences/. We *MUST* load this before =evil= so that
=:general= will work in our =use-package= definitions downstream.

#+BEGIN_SRC emacs-lisp
(use-package general
  :demand
  :config
  (general-evil-setup))
#+END_SRC

**** Supreme Leader Key Function

Using =general= We need to define some leader functions now. I believe this is for the
supreme leader, while the latter is for local leaders.

#+BEGIN_SRC emacs-lisp
(general-create-definer zamlz/leader-keys
	:states '(normal insert visual emacs)
	:keymaps 'override
	:prefix "SPC"
	:global-prefix "C-SPC")
#+END_SRC

Let's define general purpose commands for our global leader keys.
- escape should quit out of the leaders key menu ASAP
- Define space --> M-x
- It's kind of a pain to run C-x C-e to run expressions

#+BEGIN_SRC emacs-lisp
(zamlz/leader-keys
	"ESC" '(keyboard-escape-quit :which-key "(do nothing)")
	"SPC" '(execute-extended-command :which-key "execute command")
	";" '(eval-expression :which-key "eval sexp"))
#+END_SRC

We definetly need some keybindings to manage windwos.

#+BEGIN_SRC emacs-lisp
(zamlz/leader-keys
	"w" '(:ignore t :which-key "window")
	"wk" '(windmove-up :which-key "move focus up")
	"wj" '(windmove-down :which-key "move focus down")
	"wh" '(windmove-left :which-key "move focus left")
	"wl" '(windmove-right :which-key "move focus right")
	"wm" '(delete-other-windows :which-key "maximize")
	"w=" 'balance-windows-area
	"wd" 'delete-window
	"wD" 'kill-buffer-and-window
	"wr" 'winner-redo
	"wu" 'winner-undo)
#+END_SRC

Let's add some custom stuff for controlling emacs buffers.

#+BEGIN_SRC emacs-lisp
(zamlz/leader-keys
	"b" '(:ignore t :which-key "Buffer")
	"bb" '((lambda () (interactive) (switch-to-buffer (other-buffer (current-buffer) 1))) :which-key "previous buffer")
	"br" '(revert-buffer :which-key "revert buffer")
	"bd" '(kill-current-buffer :which-key "kill current buffer"))
#+END_SRC

Add some useful functionality for file management.

#+BEGIN_SRC emacs-lisp
(zamlz/leader-keys
	"f" '(:ignore t :which-key "File")
	"ff" '(find-file :which-key "find file")
	"fs" '(save-buffer :which-key "save file"))
#+END_SRC

**** Local Leader Key Function

#+BEGIN_SRC emacs-lisp
;; TODO: WTF does this do exactly...
(general-create-definer zamlz/local-leader-keys
  :states '(normal visual)
  :keymaps 'override
  :prefix ","
  :global-prefix "SPC m")
#+END_SRC

#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Evil
**** Evil Mode

Let's make GNU/Emacs more EVIL!! Okay we should also change the keybindings a bit to make it more sane.

#+BEGIN_SRC emacs-lisp
(use-package evil
  :demand
	:general
	(zamlz/leader-keys
		;; Extends window operations in leader keys
		"wv" 'evil-window-vsplit
		"ws" 'evil-window-split)
  :init
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  :config
  (evil-mode +1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	(define-key evil-normal-state-map (kbd "J") 'next-buffer)
	(define-key evil-normal-state-map (kbd "K") 'previous-buffer))
#+END_SRC

**** Evil Collection

This adds a bunch of extra useful evil functionality to other emacs modes

#+BEGIN_SRC emacs-lisp
(use-package evil-collection
  :demand
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

**** Evil Commentary

Really nice vi commenting keybindings.

#+BEGIN_SRC emacs-lisp
(use-package evil-commentary
  :diminish
  :after evil
  :config
  (evil-commentary-mode +1))
#+END_SRC

**** Evil Goggles

while this is a UI change, this makes emacs "visually" more evil.

#+BEGIN_SRC emacs-lisp
(use-package evil-goggles
  :diminish
  :after evil
	:init
	(setq evil-goggles-duration 0.05)
  :config
  (evil-goggles-mode +1)
  (evil-goggles-use-diff-faces))
#+END_SRC

*** Which Key

=which-key= is a nice tool to see available keybindings on the fly in
case we forget about it.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :init
  (setq which-key-idle-delay 1.0)
  (setq which-key-secondary-delay 0.0)
  (which-key-setup-side-window-bottom)
  :config
  (which-key-mode +1))
#+END_SRC

** User Interface
*** Font Setup

Tell emacs about what fonts we want to use.

#+BEGIN_SRC emacs-lisp
(set-face-attribute
 'default nil
 :family zamlz/default-font-family
 :height zamlz/default-font-family-size)

(set-face-attribute
 'fixed-pitch nil
 :family zamlz/default-font-family
 :height zamlz/default-font-family-size)

(set-face-attribute
 'variable-pitch nil
 :family zamlz/variable-pitch-font-family
 :height zamlz/variable-pitch-font-family-size)
#+END_SRC

Enable fira code ligitures so that our text looks real nice. Add any
things that we don't want to be ligitures to the disable list below.

#+BEGIN_SRC emacs-lisp
;; TODO: Figure out how to run the install command intelligently (fira-code-mode-install-fonts)
(use-package fira-code-mode
	:init
	(setq fira-code-mode-disabled-ligatures '("[]" "x"))
	:hook
	(prog-mode text-mode))
#+END_SRC

Let's add some keybindings for controlling the zoom.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

*** Misc

#+BEGIN_SRC emacs-lisp
;; We shoudl add a little bit of a fringe so things can be drawn there if needed
(set-fringe-mode 8)

;; Let's also make sure line numbers appear in programming modes
(dolist (mode '(prog-mode-hook conf-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 1))))

;; Let's also make the UI transparent
(defun +set-transparency (value)
  "Sets the transparency of the frame window. 0=max-transparency/100-opaque"
  (interactive "nTransparency Value 0 - 100: ")
  (set-frame-parameter (selected-frame) 'alpha value))
(+set-transparency 100) ;; set the default transparency
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Let's replace the prexisting dashboard
(use-package dashboard
  :init
  (setq dashboard-startup-banner "~/etc/emacs/navi.png")
  (setq dashboard-center-content t)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-set-navigator t)
  (setq dashboard-set-init-info t)
  (setq dashboard-items '())
  :config
  (dashboard-modify-heading-icons '((bookmarks . "book")))
  (dashboard-setup-startup-hook))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Let's configure Protesilaos Stavrou's Modus theme
(use-package modus-themes
  :init
  (setq modus-themes-inhibit-reload t)
  (setq modus-themes-italic-constructs t)
  (setq modus-themes-bold-constructs t)
  (setq modus-themes-syntax nil)
  (setq modus-themes-mixed-fonts nil)
  (setq modus-themes-links '(no-underline background))
  (setq modus-themes-prompts '(background italic))
  (setq modus-themes-mode-line '(accented))
  (setq modus-themes-tabs-accented nil)
  (setq modus-themes-completions nil)
  (setq modus-themes-mail-citations nil)
  (setq modus-themes-fringes nil)
  (setq modus-themes-lang-checkers nil)
  (setq modus-themes-hl-line nil)
  (setq modus-themes-subtle-line-numbers t)
  (setq modus-themes-paren-match '(bold intense))
  (setq modus-themes-region '(bg-only accented))
  (setq modus-themes-diffs nil)
  (setq modus-themes-org-blocks 'gray-background)
  (setq modus-themes-org-agenda nil)
  (setq modus-themes-headings nil)
  (modus-themes-load-themes)
  :config
  ;;(modus-themes-load-vivendi)
  :bind
  ("<f5>" . modus-themes-toggle))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package doom-themes)
(load-theme 'doom-tomorrow-night t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; You need to manually install all-the-icons-install-fonts
(use-package all-the-icons)

;; Dired is lacking some icons so let's get it some icons
(use-package all-the-icons-dired
  :hook
  (dired-mode . all-the-icons-dired-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; With our themes enabled, let's configure the modeline
(use-package doom-modeline
  :config
  (doom-modeline-mode +1))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Let's us make sure numbers are highlighted
(use-package highlight-numbers
  :hook
  ((prog-mode conf-mode) . highlight-numbers-mode))

;; And also make sure that escape sequences are also highlighted
(use-package highlight-escape-sequences
  :hook
  ((prog-mode conf-mode) . hes-mode))

;; Let's enable indentation hints
(use-package highlight-indent-guides
  :hook
  ((prog-mode conf-mode) . highlight-indent-guides-mode)
  :init
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-suppress-auto-error t)
  :config
  (highlight-indent-guides-auto-set-faces))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; A nice cosmetic for parens that make all them colored differently.
;; VERY useful for lisp
(use-package rainbow-delimiters
  :hook
  ((prog-mode conf-mode) . rainbow-delimiters-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Let's add some visual git integration to the editor
(use-package diff-hl
  :config
  (global-diff-hl-mode)
  (global-diff-hl-show-hunk-mouse-mode)
  (diff-hl-flydiff-mode))
#+END_SRC

** Editor

#+BEGIN_SRC emacs-lisp
;; Here are some saner editor defaults
(setq show-paren-delay 0)
(show-paren-mode +1)

;; Don't create backup files and lockdirs
(setq create-lockfiles nil)
(setq buckup-directory-alist `(("." . "~/.config/emacs/backup")))

;; Let's also add some saner dired defaults for ordering
(setq dired-listing-switches "-lahF --group-directories-first")

;; Reuse dired buffers instead of creating news whenever we traverse directories
;; FIXME: Doesn't appear to be working at all
(use-package dired-single)

;; Dired should not be showing hidden files by default lol
(use-package dired-hide-dotfiles
  :hook
  (dired-mode . dired-hide-dotfiles-mode))

;; Let's improve the undo system
(use-package undo-tree
  :init
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.cache/undo-tree/")))
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-visualizer-relative-timestamps nil)
  (setq undo-tree-visualizer-timestamps t)
  :config
  (global-undo-tree-mode +1))

;; Now that evil and undo-tree are  both loaded, let's link them together
(evil-set-undo-system 'undo-tree)

;; Now that evil-collection and dired is setup, we need to integrate the two
(evil-collection-define-key 'normal 'dired-mode-map
  "h" 'dired-single-up-directory ;; dired-single version of 'dired-up-directory
  "l" 'dired-single-buffer ;; dired-single version of 'dired-find-file
  "H" 'dired-hide-dotfiles-mode)
#+END_SRC

** Org Mode
*** Org

Let's start with a basic configuration of org mode. The following code
block sets up the hooks.

#+BEGIN_SRC emacs-lisp
(use-package org
  :hook
  (org-mode
   . (lambda ()
       (org-indent-mode)
       (org-num-mode)))) 
#+END_SRC

Create org directory if it doesn't exist.

#+BEGIN_SRC emacs-lisp
(unless (file-directory-p zamlz/org-directory)
  (make-directory zamlz/org-directory))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-directory zamlz/org-directory)
(setq org-src-preserve-indentation t)
(setq org-hide-emphasis-markers t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package org
  :init
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-ellipsis " ▾")
#+END_SRC

*** Org-roam

#+BEGIN_SRC emacs-lisp
;; Let's configure org-roam as well
(use-package org-roam
	:after org
	:init
	(setq org-roam-v2-ack t)
	(setq org-roam-directory zamlz/org-directory)
	:config
	(org-roam-db-autosync-mode +1))
#+END_SRC

** Completion System

#+BEGIN_SRC emacs-lisp
;; A very lightweight minibuffer completion system
(use-package vertico
  :config
  (vertico-mode +1))

;; helps make vertico look nice by annotating completions
(use-package marginalia
  :config
  (marginalia-mode +1))

;; Cycle between marignalia annotations in vertico
(define-key vertico-map (kbd "M-m") #'marginalia-cycle)

;; Configure orderless completion
(use-package orderless
  :init
  (setq completion-styles '(orderless basic))
  (setq completion-category-defaults nil)
  (setq completion-category-overrides '((file (styles partial-completion)))))


;; Let's us add icons to the completion annotations
(use-package all-the-icons-completion
  :config
  (all-the-icons-completion-mode +1))

;; We need to add the icons setup to marginalia's annotations with this hook
(add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup)

(use-package consult)
(use-package embark)
(use-package embark-consult)
#+END_SRC

** Language Support

*** Git Configuration Files

gitattributes, gitconfig, gitignore, etc.

#+BEGIN_SRC emacs-lisp
(use-package git-modes)
#+END_SRC

** Applications
*** Magit

Magit is an amazing interface for git through emacs.

#+BEGIN_SRC emacs-lisp
(use-package magit
	:general
	(zamlz/leader-keys
		"g" '(:ignore t :which-key "git")
		"gg" 'magit-status
		"gG" 'magit-status-here
		"gl" 'magit-log
		"gb" 'magit-blame))
#+END_SRC

Scan =TODO=-like statments in source files of a git repo and display it
in the magit status buffer with the following plugin.

#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :after magit
  :config
  (magit-todos-mode +1))
#+END_SRC

*** Projectile

This is also incredibly useful! It provides various project management
utilites.

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :diminish
	:general
	(zamlz/leader-keys
		"p" '(:keymap projectile-command-map :which-key "project"))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (setq projectile-project-search-path '())
  (dolist (project-dir '("~/src" "~/usr"))
    (when (file-directory-p project-dir)
(add-to-list 'projectile-project-search-path project-dir)))
  :config
  (projectile-mode +1))
#+END_SRC

*** Helpful

Helpful is a replacement for the emacs help pages with far more info
and context.

#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  (("C-h f" . helpful-callable)
   ("C-h v" . helpful-variable)
   ("C-h k" . helpful-key)
   ("C-h F" . helpful-function)
   ("C-h C" . helpful-command)
   ("C-h C-d" . helpful-at-point)))

#+END_SRC

** Cross Package Integrations

Finally load any cross module integrations that were not able to be
put in the module files themselves (ex: magit and evil integration)

Unfortunately, magit's editor doesn't start in "insert" mode which is
really inconvenient. Add this hook to enable that.

#+BEGIN_SRC emacs-lisp
(add-hook 'with-editor-mode-hook #'evil-insert-state)
#+END_SRC
