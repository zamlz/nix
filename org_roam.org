:PROPERTIES:
:ID:       e6532b52-0b06-406f-a7ed-89591de98b40
:ROAM_REFS: https://www.orgroam.com/
:END:
#+TITLE: Org-roam
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:15]
#+LAST_MODIFIED: [2021-07-25 Sun 09:58:01]
#+STARTUP: content
#+filetags: CONFIG SOFTWARE EMACS

#+DOWNLOADED: screenshot @ 2021-03-27 00:26:48
[[file:data/org_roam_logo.png]]

* A Plain Text Personal Knowledge Management System

Org-roam is a really cool piece of software thats built to emulate the feature of Roam Research using the system provided by [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]]. The project aims to implement [[id:1c9102c5-5e91-450a-ace9-e0ebdd73204f][Zettelkasten Method]] through software.

* Useful Resources
- [[https://www.orgroam.com/manual.html][Org-roam Official User Manual]]
- [[https://org-roam.discourse.group/][Org-roam Discourse Forum]]
- [[https://hugocisneros.com/notes/][Hugo Cisneros's Personal Notes (PhD Student studying Robotics)]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Roam Workflow]]
- [[https://www.youtube.com/watch?v=RvWic15iXjk][Nat Eliason: How to Use Roam to Outline a New Article in Under 20 Minutes]]
- [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Jehtro's Blog: Org-mode Workflow Part 3: Zettelkasten with Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-org-roam.el :comments both :mkdirp yes
:END:
** Setup Dependencies
Before loading up any =org-roam= related things, let's import [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] first.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

** Package Install
Let's setup =org-roam= now.

#+begin_src emacs-lisp
(use-package org-roam
  :bind (:map org-mode-map ("M-i" . org-roam-node-insert)))
#+end_src

** Customize Parameter
Before we use =org-roam=, we need to acknowledge that we are ready to use =v2=.

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

Configure various paths for =org-roam=.

#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")
(setq org-roam-dailies-directory "private/journal/")
(setq org-roam-file-exclude-regexp "README.org")
(setq org-roam-db-update-method 'immediate)
#+end_src

** Start Org-roam
Let's manually start up =org-roam=

#+begin_src emacs-lisp
(org-roam-setup)
#+end_src

** Show Backlink Count in Search
In =org-roam-node-find=, we want to also be able to see the number of backlinks. Note, we also update the =org-roam-node-display-template= here.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-directories ((node org-roam-node))
  (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (format "(%s)" (car (f-split dirs)))
    ""))

(cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
  (let* ((count (caar (org-roam-db-query
                       [:select (funcall count source)
                                :from links
                                :where (= dest $s1)
                                :and (= type "id")]
                       (org-roam-node-id node)))))
    (format "[%d]" count)))

(setq org-roam-node-display-template "${directories:14} ${title:100} ${backlinkscount:6} ${tags:50}")
#+end_src

** Capture Templates
Capture templates, not much to explain here.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      `(("d" "default" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "notes/${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+STARTUP: content\n")
         :unnarrowed t)
        ("p" "private" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "private/${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+STARTUP: content\n")
         :unnarrowed t)
        ("c" "config" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "config/${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: CONFIG SOFTWARE\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+STARTUP: content\n")
         :unnarrowed t)
        ("w" "webpages/bookmarks" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "bookmarks/${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: BOOKMARK\n"
                        "#+ROAM_KEY: %x\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+STARTUP: content\n")
         :unnarrowed t)
        ("b" "blogpost" plain (function org-roam--capture-get-point)
         "\n%?"
         :file-name "blog/${slug}"
         :head ,(concat "#+TITLE: ${title}\n"
                        "#+AUTHOR: %n (%(user-login-name))\n"
                        "#+ROAM_TAGS: BLOGPOST\n"
                        "#+CREATED: %U\n"
                        "#+LAST_MODIFIED: %U\n"
                        "#+STARTUP: content\n")
         :unnarrowed t)
        ))
#+end_src

** Custom Property Setters
=Org-roam= already comes with prety good property setters, but we only have two here, =org-roam-tag-add= and =org-roam-alias-add=. We should create our own function here for setting the =ROAM_KEY= property since a function for it doesn't exist.

#+begin_src emacs-lisp
(defun zamlz/org-roam-key-add ()
  "Add a key to Org-roam file.

Return added key."
  (interactive)
  (unless org-roam-mode (org-roam-mode))
  (let ((key (read-string "Key: " )))
    (when (string-empty-p key)
      (user-error "Key can't be empty"))
    (org-roam--set-global-prop
     "roam_key" key)
    (org-roam-db--update-file (buffer-file-name (buffer-base-buffer)))
    alias))
#+end_src

All the properties that get set are not in caps unfortunately, and I prefer to see them in caps as I like the idea of global properties being in caps. To fix this, we should /advice/ the =org-roam--set-global-props= function and configure it such that the argument for the global property is always caps.

#+begin_src emacs-lisp
(defun zamlz/org-roam-uppercase-global-props (args)
  "Ensure that car of ARGS are uppercase"
  (append (list (upcase (car args))) (cdr args)))
#+end_src

#+begin_src emacs-lisp
(advice-add 'org-roam--set-global-prop :filter-args #'zamlz/org-roam-uppercase-global-props)
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-org-roam)
#+end_src
