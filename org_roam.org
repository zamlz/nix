:PROPERTIES:
:ID:       e6532b52-0b06-406f-a7ed-89591de98b40
:ROAM_REFS: https://www.orgroam.com/
:END:
#+TITLE: Org-roam
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:15]
#+LAST_MODIFIED: [2021-07-26 Mon 09:35:40]
#+STARTUP: content
#+filetags: CONFIG SOFTWARE EMACS

#+DOWNLOADED: screenshot @ 2021-03-27 00:26:48
[[file:data/org_roam_logo.png]]

* A Plain Text Personal Knowledge Management System

Org-roam is a really cool piece of software thats built to emulate the feature of Roam Research using the system provided by [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]]. The project aims to implement [[id:1c9102c5-5e91-450a-ace9-e0ebdd73204f][Zettelkasten Method]] through software.

* Useful Resources
- [[https://www.orgroam.com/manual.html][Org-roam Official User Manual]]
- [[https://org-roam.discourse.group/][Org-roam Discourse Forum]]
- [[https://hugocisneros.com/notes/][Hugo Cisneros's Personal Notes (PhD Student studying Robotics)]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Roam Workflow]]
- [[https://www.youtube.com/watch?v=RvWic15iXjk][Nat Eliason: How to Use Roam to Outline a New Article in Under 20 Minutes]]
- [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Jehtro's Blog: Org-mode Workflow Part 3: Zettelkasten with Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-org-roam.el :comments both :mkdirp yes
:END:
** Setup Dependencies
Before loading up any =org-roam= related things, let's import [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] first.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

** Package Install
Let's setup =org-roam= now.

#+begin_src emacs-lisp
(use-package org-roam
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam)
   :map org-mode-map
   ("M-i"   . completion-at-point)))
#+end_src

** Customize Parameter
Before we use =org-roam=, we need to acknowledge that we are ready to use =v2=.

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

Configure various paths for =org-roam=.

#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")
(setq org-roam-dailies-directory "private/journal/")
(setq org-roam-file-exclude-regexp "README.org")
#+end_src

We always want the database to be updated the moment any file is udpated.

#+begin_src emacs-lisp
(setq org-roam-db-update-method 'immediate)
#+end_src

Provides completion without the use of =[[=.

#+begin_src emacs-lisp
(setq org-roam-completion-everywhere t)
#+end_src

** Start Org-roam
Let's manually start up =org-roam=

#+begin_src emacs-lisp
(org-roam-setup)
#+end_src

** Update Display Template
In =org-roam-node-find=, we want to see various metadata as well.

Here are some helper functions for figuring out backlinks count.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-directories ((node org-roam-node))
  (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (format "(%s)" (car (f-split dirs)))
    ""))

(cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
  (let* ((count (caar (org-roam-db-query
                       [:select (funcall count source)
                                :from links
                                :where (= dest $s1)
                                :and (= type "id")]
                       (org-roam-node-id node)))))
    (format "[%d]" count)))
#+end_src

We can also customize the node heirachy as well.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-filetitle ((node org-roam-node))
  "Return the file TITLE for the node."
  (org-roam-get-keyword "TITLE" (org-roam-node-file node)))

(cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
  "Return the hierarchy for the node."
  (let ((title (org-roam-node-title node))
        (olp (org-roam-node-olp node))
        (level (org-roam-node-level node))
        (filetitle (org-roam-node-filetitle node)))
    (concat
     (if (> level 0) (concat filetitle " > "))
     (if (> level 1) (concat (string-join olp " > ") " > "))
     title)))
#+end_src

Once we have the custom functions configured for backlinks and hierachy, we can now incoporate it with the display template.

#+begin_src emacs-lisp
(setq org-roam-node-display-template "${directories:14} ${hierarchy:100} ${backlinkscount:6} ${tags:50}")
#+end_src

** Capture Templates
Capture templates, not much to explain here.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      `(("d" "default" plain "\n%?"
         :if-new (file+head "notes/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"))
         :unnarrowed t)
        ("p" "private" plain "\n%?"
         :if-new (file+head "private/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"))
         :unnarrowed t)
        ("c" "config" plain "\n%?"
         :if-new (file+head "config/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"
                                     "#+FILETAGS: CONFIG SOFTWARE\n"))
         :unnarrowed t)))
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-org-roam)
#+end_src
