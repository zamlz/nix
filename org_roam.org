:PROPERTIES:
:ID:       e6532b52-0b06-406f-a7ed-89591de98b40
:ROAM_REFS: https://www.orgroam.com/
:END:
#+TITLE: Org-roam
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:15]
#+LAST_MODIFIED: [2021-10-14 Thu 16:18:48]
#+FILETAGS: :config:emacs:

#+DOWNLOADED: screenshot @ 2021-03-27 00:26:48
[[file:data/org_roam_logo.png]]

* A Knowledge Management System for Org-mode

Org-roam is a really cool piece of software thats built to emulate the feature of Roam Research using the system provided by [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]]. The project aims to implement [[id:1c9102c5-5e91-450a-ace9-e0ebdd73204f][Zettelkasten Method]] through software.

* Useful Resources
- [[https://www.orgroam.com/manual.html][Org-roam Official User Manual]]
- [[https://org-roam.discourse.group/][Org-roam Discourse Forum]]
- [[https://hugocisneros.com/notes/][Hugo Cisneros's Personal Notes (PhD Student studying Robotics)]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Roam Workflow]]
- [[https://www.youtube.com/watch?v=RvWic15iXjk][Nat Eliason: How to Use Roam to Outline a New Article in Under 20 Minutes]]
- [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Jehtro's Blog: Org-mode Workflow Part 3: Zettelkasten with Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-org-roam.el :comments both :mkdirp yes
:END:
** Setup Dependencies
Before loading up any =org-roam= related things, let's import [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] first.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

We also import [[id:36dbad05-71b2-47b1-ae87-9f8334a4f554][All The Icons]] here because we use them to create icons in our search buffer.

#+begin_src emacs-lisp
(require 'init-all-the-icons)
#+end_src

** Package Install
Let's setup =org-roam= now.

#+begin_src emacs-lisp
(use-package org-roam
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n /" . org-roam-node-find)
   ("C-c n ?" . org-roam-ref-find)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n t" . org-roam-tag-add)
   ("C-c n T" . org-roam-tag-remove)
   ("C-c n a" . org-roam-alias-add)
   ("C-c n A" . org-roam-alias-remove)
   ("C-c n r" . org-roam-ref-add)
   ("C-c n R" . org-roam-ref-remove)
   ("C-c n b" . org-roam-db-sync)
   :map org-mode-map
   ("M-i"   . completion-at-point)))
#+end_src

** Customize Parameter
Before we use =org-roam=, we need to acknowledge that we are ready to use =v2=.

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

Configure various paths for =org-roam=.

#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")
(setq org-roam-dailies-directory "private/journal/")
(setq org-roam-file-exclude-regexp "README.org")
#+end_src

We always want the database to be updated the moment any file is udpated.

#+begin_src emacs-lisp
(setq org-roam-db-update-method 'immediate)
#+end_src

Provides completion without the use of =[[=.

#+begin_src emacs-lisp
(setq org-roam-completion-everywhere t)
#+end_src

** Start Org-roam
Let's manually start up =org-roam=

#+begin_src emacs-lisp
(org-roam-db-autosync-mode)
#+end_src

** Properties Drawer Visibility
We can control the visibility of the propertie drawer for the =org-roam= nodes so they don't stick out like a sore thumb.

#+begin_src emacs-lisp
(defun zamlz/org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))
#+end_src

#+begin_src emacs-lisp
(defun zamlz/org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (interactive)
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))
#+end_src

#+begin_src emacs-lisp
(defun zamlz/org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (zamlz/org-show-properties)
    (zamlz/org-hide-properties)))
#+end_src

** Display Template
We can update the look of the default display template used to show the results of our search through the =org-roam= database. The default looks pretty bad and doesn't have useful information for us to use. We'll need to define a couple of special functions using the ~cl-defmethod~ function.

Here we get the file title:

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-filetitle ((node org-roam-node))
  "Return the file TITLE for the node."
  (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
#+end_src

We also want the heirachy of the node too

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
  "Return the hierarchy for the node."
  (let ((title (org-roam-node-title node))
        (olp (org-roam-node-olp node))
        (level (org-roam-node-level node))
        (filetitle (org-roam-node-filetitle node))
        (sepicon (propertize " > " 'face 'org-roam-dim)))
    (concat
     (let ((tags (seq-filter
                  (lambda (tag) (not (string= tag "ATTACH")))
                  (org-roam-node-tags node))))
       (cond ((member "CONFIG" tags) (all-the-icons-material "settings" :face 'org-roam-dim))
             ((member "CONTACTS" tags) (all-the-icons-material "person" :face 'org-roam-dim))
             (t (all-the-icons-material "list" :face 'org-roam-dim))))
     " "
     (if (> level 0) (concat filetitle sepicon))
     (if (> level 1) (concat (string-join olp sepicon) sepicon))
     title)))
#+end_src

The following provides which directory the node file belongs to:

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-directories ((node org-roam-node))
  (if-let ((dirs (file-name-directory
                  (file-relative-name (org-roam-node-file node) org-roam-directory))))
      (concat (all-the-icons-material "folder"
                                      :face 'all-the-icons-dblue
                                      :height 0.9)
              (format " %s/" (car (f-split dirs))))
    ""))
#+end_src

While this one will give us the backlink count.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
   (let* ((count (caar (org-roam-db-query
                        [:select (funcall count source)
                                 :from links
                                 :where (= dest $s1)
                                 :and (= type "id")]
                        (org-roam-node-id node))))
          )
     (if (> count 0)
         (concat (all-the-icons-material "link"
                                         :face 'all-the-icons-red
                                         :height 0.9)
                 (format " %-3d" count))
       (all-the-icons-material "link"
                               :face 'org-roam-dim
                               :height 0.9))))
#+end_src

We also need to have a function that displays the tags for the file.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-taglist ((node org-roam-node))
  "Return the tags of the node"
  (let* ((tags (seq-filter
                (lambda (tag) (not (string= tag "ATTACH")))
                (org-roam-node-tags node))))
    (propertize (string-join tags ", ") 'face 'all-the-icons-dgreen)))
#+end_src

One last method to create the identifier for references

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-refindicator((node org-roam-node))
  (let ((refs (org-roam-node-refs node)))
    (if (eq nil refs)
        (all-the-icons-material "bookmark_border" :face 'org-roam-dim)
      (all-the-icons-material "bookmark" :face 'org-roam-dim))))
#+end_src

Finally, update the display template.

#+begin_src emacs-lisp
(setq org-roam-node-display-template
      (concat
       "${directories:12}"
       "${backlinkscount:7}"
       "${hierarchy:80}"
       "${refindicator:3}"
       "${taglist:50}"
))
#+end_src

** Capture Templates
Capture templates, not much to explain here.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      `(("d" "default" plain "\n%?"
         :if-new (file+head "notes/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+FILETAGS:\n"))
         :unnarrowed t)
        ("p" "private" plain "\n%?"
         :if-new (file+head "private/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+FILETAGS:\n"))
         :unnarrowed t)
        ("c" "config" plain "\n%?"
         :if-new (file+head "config/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+FILETAGS: :config:\n"))
         :unnarrowed t)))
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-org-roam)
#+end_src
