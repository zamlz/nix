:PROPERTIES:
:ID:       e6532b52-0b06-406f-a7ed-89591de98b40
:ROAM_REFS: https://www.orgroam.com/
:END:
#+TITLE: Org-roam
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:15]
#+LAST_MODIFIED: [2021-07-26 Mon 11:58:50]
#+STARTUP: content
#+filetags: CONFIG SOFTWARE EMACS

#+DOWNLOADED: screenshot @ 2021-03-27 00:26:48
[[file:data/org_roam_logo.png]]

* A Plain Text Personal Knowledge Management System

Org-roam is a really cool piece of software thats built to emulate the feature of Roam Research using the system provided by [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]]. The project aims to implement [[id:1c9102c5-5e91-450a-ace9-e0ebdd73204f][Zettelkasten Method]] through software.

* Useful Resources
- [[https://www.orgroam.com/manual.html][Org-roam Official User Manual]]
- [[https://org-roam.discourse.group/][Org-roam Discourse Forum]]
- [[https://hugocisneros.com/notes/][Hugo Cisneros's Personal Notes (PhD Student studying Robotics)]]
- [[https://rgoswami.me/posts/org-note-workflow/][An Orgmode Roam Workflow]]
- [[https://www.youtube.com/watch?v=RvWic15iXjk][Nat Eliason: How to Use Roam to Outline a New Article in Under 20 Minutes]]
- [[https://blog.jethro.dev/posts/zettelkasten_with_org/][Jehtro's Blog: Org-mode Workflow Part 3: Zettelkasten with Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-org-roam.el :comments both :mkdirp yes
:END:
** Setup Dependencies
Before loading up any =org-roam= related things, let's import [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] first.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

We also import [[id:36dbad05-71b2-47b1-ae87-9f8334a4f554][All The Icons]] here because we use them to create icons in our search buffer.

#+begin_src emacs-lisp
(require 'init-all-the-icons)
#+end_src

** Package Install
Let's setup =org-roam= now.

#+begin_src emacs-lisp
(use-package org-roam
  :bind
  (("C-c n l" . org-roam-buffer-toggle)
   ("C-c n /" . org-roam-node-find)
   ("C-c n ?" . org-roam-ref-find)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n t" . org-roam-tag-add)
   ("C-c n T" . org-roam-tag-remove)
   ("C-c n a" . org-roam-alias-add)
   ("C-c n A" . org-roam-alias-remove)
   ("C-c n r" . org-roam-ref-add)
   ("C-c n R" . org-roam-ref-remove)
   ("C-c n b" . org-roam-db-sync)
   :map org-mode-map
   ("M-i"   . completion-at-point)))
#+end_src

** Customize Parameter
Before we use =org-roam=, we need to acknowledge that we are ready to use =v2=.

#+begin_src emacs-lisp
(setq org-roam-v2-ack t)
#+end_src

Configure various paths for =org-roam=.

#+begin_src emacs-lisp
(setq org-roam-directory "~/org/")
(setq org-roam-dailies-directory "private/journal/")
(setq org-roam-file-exclude-regexp "README.org")
#+end_src

We always want the database to be updated the moment any file is udpated.

#+begin_src emacs-lisp
(setq org-roam-db-update-method 'immediate)
#+end_src

Provides completion without the use of =[[=.

#+begin_src emacs-lisp
(setq org-roam-completion-everywhere t)
#+end_src

** Start Org-roam
Let's manually start up =org-roam=

#+begin_src emacs-lisp
(org-roam-setup)
#+end_src

** Update Display Template
In =org-roam-node-find=, we want to see various metadata as well and prettify it with icons.

This first function is pretty straightforward, we simply get the node title.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-filetitle ((node org-roam-node))
  "Return the file TITLE for the node."
  (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
#+end_src

This function computes the backlinks and creates an output message using [[id:36dbad05-71b2-47b1-ae87-9f8334a4f554][all-the-icons]].

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
   (let* ((count (caar (org-roam-db-query
                        [:select (funcall count source)
                                 :from links
                                 :where (= dest $s1)
                                 :and (= type "id")]
                        (org-roam-node-id node))))
          )
     (if (> count 0)
         (concat (propertize "=has:backlinks=" 'display
                             (all-the-icons-material "link"
                                                     :face 'all-the-icons-dblue
                                                     :height 0.9))
                 " "
                 (format "%d" count))
       (concat (propertize "=not-backlinks=" 'display
                           (all-the-icons-material "link"
                                                   :face 'org-roam-dim
                                                   :height 0.9))
               " "))))
#+end_src

We use a certain collection of variables to denote the primary tags. This will be useful for filtering. The remaining tags will be displayed later in the output.

#+begin_src emacs-lisp
(setq zamlz/roam-primary-tags '("CONFIG" "CONTACTS" "JOURNAL" "LOCATION"))
#+end_src

This function displays the primary tag and incorporates [[id:36dbad05-71b2-47b1-ae87-9f8334a4f554][all-the-icons]] as well.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-functiontag ((node org-roam-node))
  "The first tag of notes are used to denote note type"
  (let* ((specialtags zamlz/roam-primary-tags)
         (tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
         (functiontag (seq-intersection specialtags tags 'string=))
         )
    (concat
     ;; (if functiontag
     ;;     (propertize "=has:functions=" 'display (all-the-icons-octicon "gear"
     ;;                 :face 'all-the-icons-silver :v-adjust 0.02 :height 0.8))
     ;;   (propertize "=not-functions=" 'display (all-the-icons-octicon "gear"
     ;;               :face 'org-roam-dim :v-adjust 0.02 :height 0.8))
     ;;   )
     (if functiontag
         (propertize "=@=" 'display (all-the-icons-faicon "tags"
                                                          :face 'all-the-icons-dgreen
                                                          :v-adjust 0.02
                                                          :height 0.7))
       (propertize "= =" 'display (all-the-icons-faicon "tags"
                                                        :face 'all-the-icons-dgreen
                                                        :v-adjust 0.02
                                                        :height 0.7)))
     " "
     (string-join functiontag ", ")
     )))
#+end_src

This secondary function displays the remaining tags.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-othertags ((node org-roam-node))
  "Return the file TITLE for the node."
  (let* ((tags (seq-filter (lambda (tag) (not (string= tag "ATTACH"))) (org-roam-node-tags node)))
         (specialtags zamlz/roam-primary-tags)
         (othertags (seq-difference tags specialtags 'string=))
         )
    (concat
     ;; " "
     ;; (if othertags
     ;;     (propertize "=has:tags=" 'display (all-the-icons-faicon "tags"
     ;;           :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.8))
     ;;   (propertize "=not-tags=" 'display (all-the-icons-faicon "tags"
     ;;           :face 'all-the-icons-dgreen :v-adjust 0.02 :height 0.8))
     ;;   )
     ;; " "
     (if othertags
         (propertize "=@=" 'display "")
       (propertize "= =" 'display "")
       )
     (if othertags "[" "")
     (propertize (string-join othertags ", ") 'face 'all-the-icons-dgreen)
     (if othertags "]" "")
     )))
#+end_src

This function shows the full heirarchy of the node should such a node exist.

#+begin_src emacs-lisp
(cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
  "Return the hierarchy for the node."
  (let* ((title (org-roam-node-title node))
         (olp (mapcar (lambda (s) (if (> (length s) 10) (concat (substring s 0 10)  "...") s))
                      (org-roam-node-olp node)))
         (level (org-roam-node-level node))
         (filetitle (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
         (shortentitle (if (> (length filetitle) 20)
                           (concat (substring filetitle 0 20)  "...") filetitle))
         (separator (concat " " (all-the-icons-material "chevron_right") " ")))
    (cond
     ((>= level 1) (concat (propertize (format "=level:%d=" level) 'display
                                       (all-the-icons-material "list" :face 'all-the-icons-blue))
                           " "
                           (propertize shortentitle 'face 'org-roam-dim)
                           (propertize separator 'face 'org-roam-dim)
                           title))
     (t (concat (propertize (format "=level:%d=" level) 'display
                            (all-the-icons-material "insert_drive_file"
                                                    :face 'all-the-icons-blue))
                " "
                title)))))
#+end_src

Once we have the custom functions configured for backlinks and hierachy, we can now incoporate it with the display template.

#+begin_src emacs-lisp
(setq org-roam-node-display-template
      (concat
       "${backlinkscount:18} "
       "${functiontag:16} "
       "${hierarchy:125}"
       "${othertags:50} "
       ))
#+end_src

** Capture Templates
Capture templates, not much to explain here.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      `(("d" "default" plain "\n%?"
         :if-new (file+head "notes/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"))
         :unnarrowed t)
        ("p" "private" plain "\n%?"
         :if-new (file+head "private/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"))
         :unnarrowed t)
        ("c" "config" plain "\n%?"
         :if-new (file+head "config/${slug}.org"
                            ,(concat "#+TITLE: ${title}\n"
                                     "#+AUTHOR: %n (%(user-login-name))\n"
                                     "#+CREATED: %U\n"
                                     "#+LAST_MODIFIED: %U\n"
                                     "#+STARTUP: content\n"
                                     "#+FILETAGS: CONFIG SOFTWARE\n"))
         :unnarrowed t)))
#+end_src

** Feature Provide

#+begin_src emacs-lisp
(provide 'init-org-roam)
#+end_src
