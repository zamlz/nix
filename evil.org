:PROPERTIES:
:ID:       6125052e-63a9-4165-a194-cfc12cb7beb2
:ROAM_ALIASES: evil-mode
:END:
#+TITLE: Evil Mode
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-04-04 Sun 13:10]
#+LAST_MODIFIED: [2021-10-14 Thu 17:21:21]
#+STARTUP: content
#+FILETAGS: :config:emacs:

* Extensible Vi Layer for Emacs
#+DOWNLOADED: screenshot @ 2021-04-04 13:11:33
[[file:data/evil_mode_logo.png]]

A pretty nice package that is used for lets you use the primary features of vim keybindings from wtihin [[id:cf447557-1f87-4a07-916a-160cfd2310cf][GNU/Emacs]]. The configuration below will contain any packages that have to do with setting up evil properly.

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-evil.el :comments both :mkdirp yes
:END:
** Enable Evil

[[https://github.com/emacs-evil/evil][github:emacs-evil/evil]] is the core of =Evil-Mode=. This basicallly adds the modal functionality to emacs that we see in vim. But we also add a little bit of our own custom bindings not set by default that were present in vim for the sake of my sanity.

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

  ;; The defaults for Shift-j/k are not inuitive. I even remapped them
  ;; back when I was using vim as well becuase I would accidentally
  ;; press it all the time.
  (define-key evil-normal-state-map (kbd "J") nil)
  (define-key evil-normal-state-map (kbd "K") nil)

  ;; We want to override the RET key for other useful things but
  ;; Evil takes control of it because its evil. The same is true
  ;; for SPC and TAB but I'm not sure if I want those yet.
  (define-key evil-motion-state-map (kbd "RET") nil)
  ;(define-key evil-motion-state-map (kbd "SPC") nil)
  ;(define-key evil-motion-state-map (kbd "TAB") nil)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  ;; configure initial states in specific modes
  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))
#+end_src

** Setup Undo-Tree
=evil-mode= is nice, but the undo system could be improved alot if we make use of [[id:ebd23b73-f91a-4737-aec9-c1064b5350a8][Undo Tree]] so let's ensure that's setup first.

#+begin_src emacs-lisp
(require 'init-undo-tree)
#+end_src

We also need to tell =evil-mode= to actually use it once its loaded.

#+begin_src emacs-lisp
(evil-set-undo-system 'undo-tree)
#+end_src

** Extra Collections

[[https://github.com/emacs-evil/evil-collection][github:emacs-evil/evil-collection]] adds support for vi-like bindings in modes that the core evil-mode package doesn't provide. There are quite a bit of packages here in this list so make sure to review it.

#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "l" 'dired-single-buffer))
#+end_src

** Quick Commenting

[[https://github.com/linktohack/evil-commentary][github:linktohack/evil-commentary]] adds keybindings for quick commenting. Use =gcc= to comment out a line, use =gcap= to comment out a paragraph, use =gc= in visual mode to comment out a selection.

#+begin_src emacs-lisp
(use-package evil-commentary
  :after evil
  :diminish
  :config (evil-commentary-mode +1))
#+end_src

** Display Marks in Fringe

[[https://github.com/Andrew-William-Smith/evil-fringe-mark][github:Andrew-William-Smith/evil-fringe-mark]] lets us change the right fringe of the buffer is used to show visual hints for markers that we mark with =m=. These marks can be jumped to with ='=.

#+begin_src emacs-lisp
(use-package evil-fringe-mark
  :disabled
  :after evil
  :custom
  ;; (right-fringe-width 16)
  (evil-fringe-mark-side 'right-fringe)
  (evil-fringe-mark-show-special t)
  :config
  (global-evil-fringe-mark-mode))
#+end_src

** Package Provides

#+begin_src emacs-lisp
(provide 'init-evil)
#+end_src
