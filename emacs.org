:PROPERTIES:
:ID:       cf447557-1f87-4a07-916a-160cfd2310cf
:ROAM_REFS: https://www.gnu.org/software/emacs/
:END:
#+TITLE: GNU/Emacs
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:17]
#+LAST_MODIFIED: [2021-10-12 Tue 17:22:28]
#+filetags: CONFIG SOFTWARE EMACS

* The Extensible, Customizable Free/Libre Text Editor
#+DOWNLOADED: screenshot @ 2021-05-13 10:02:43
[[file:data/emacs_logo.png]]

* Useful Resources

There are some cool configurations from other people that I've taken influence from for my own emacs configuration.

- [[https://config.daviwil.com/emacs][David Wilson's (System Crafters) Emacs Configuration]]
- [[https://pages.sachachua.com/.emacs.d/][Sasha Chau's Emacs Configuration]]
- [[https://tecosaur.github.io/emacs-config/config.html][Tecosaur's Doom Emacs Configuration]]
- [[https://config.phundrak.com/emacs][Phundrak's Emacs Configuration]]
- [[https://writequit.org/org/][WriteQuit's Dotfiles with Org]]
- [[https://protesilaos.com/dotemacs/][Protosilaos Stavrou's Dotfiles]]
- [[https://github.com/rememberYou/.emacs.d][rememberYou's Emacs Configuration]]

* Tips and Tricks
As I find things to write here, I'll put it in.

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/init.el :comments both :mkdirp yes
:END:
** Garbage Collector Hooks

Supposedly makes the startup a bit more effecient. We also revert the changes to the GC via a hook once the startup has completed.

#+begin_src emacs-lisp
(defvar file-name-handler-alist-original file-name-handler-alist)

(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6
      file-name-handler-alist nil
      site-run-file nil)

(defvar zamlz/gc-cons-threshold 100000000)

(add-hook 'emacs-startup-hook ; hook run after loading init files
          (lambda ()
            (setq gc-cons-threshold zamlz/gc-cons-threshold
                  gc-cons-percentage 0.1
                  file-name-handler-alist file-name-handler-alist-original)))

(add-hook 'minibuffer-setup-hook
          (lambda ()
            (setq gc-cons-threshold (* zamlz/gc-cons-threshold 2))))
(add-hook 'minibuffer-exit-hook
          (lambda ()
            (garbage-collect)
            (setq gc-cons-threshold zamlz/gc-cons-threshold)))
#+end_src

** Update Load Path

Optimize: Force =lisp= and =site-lisp= at the head to reduce the startup time.

#+begin_src emacs-lisp
(defun update-load-path (&rest _)
  "Update `load-path'."
  (dolist (dir '("site-lisp" "lisp"))
    (push (expand-file-name dir user-emacs-directory) load-path)))

(update-load-path)
#+end_src

Make sure to populate the =lisp= and =site-lisp= directories.

#+begin_src conf :tangle ~/.config/emacs/lisp/.keep :mkdirp yes
#PLACEHOLDER FILE FOR LISP DIR
#+end_src

** Package Management

I originally was using the internal =package.el= that is a part of Emacs, but while simple and straightforward to use, it has some limitations. I have found that it may be better to make use of [[id:750e3e6c-e469-4be6-b65d-6ed0b58dabb9][straight.el]].

#+begin_src emacs-lisp
(require 'init-straight)
#+end_src

** Internal

#+begin_src emacs-lisp
;;(require 'init-package) ;; CONTAINS OLD USE PACKAGE SETUP
(require 'init-dired)
(require 'init-ibuffer)
#+end_src

*** Reorganize This
**** Basic Emacs Setup

Lets get some basic settings out of the way here.

#+begin_src emacs-lisp
(use-package emacs
  :preface
  ;; Setup personal preferances
  (defvar zamlz/indent-width 4)   ; tab size
  (defvar zamlz/default-screen-width 100)
  :custom
  ;; Configure personal information
  (user-full-name "Amlesh Sivanantham")
  (user-mail-address "zamlz@pm.me")
  (user-login-name "zamlz")
  ;; Other basic settings
  (ring-bell-function 'ignore) ; minimise distractio
  (frame-resize-pixelwise t)
  (default-directory "~/")
  :config
  ;; Set Environment Variables
  (setenv "PINENTRY_USER_DATA" "rofi")
  (setenv "VISUAL" "emacsclient --socket-name=xorg-emacs-daemon" )
  (setenv "EDITOR" (getenv "VISUAL"))
  ;; Configure Specific UI changes
  (tool-bar-mode -1)          ; Disable the toolbar
  (menu-bar-mode -1)          ; disable the menubar
  (set-fringe-mode 10)        ; Give some breathing room
  (blink-cursor-mode 1)       ; Let the cursor be blinking
  (semantic-mode 1)
  ;; (tooltip-mode -1)           ; Disable tooltips
  ;; Always use spaces for indentation
  (setq-default indent-tabs-mode nil
                tab-width zamlz/indent-width
                fill-column zamlz/default-screen-width))
#+end_src

**** Modernize Selection Behaviour

Replaces active region just by typing text.

#+begin_src emacs-lisp
(setq delete-selection-mode +1)
#+end_src

**** Disable Scroll-Bar

Better scrolling experience

#+begin_src emacs-lisp
(setq scroll-margin 0)
(setq scroll-conservatively 101) ; > 100
(setq scroll-preserve-screen-position t)
(setq auto-window-vscroll nil)
#+end_src

Don't display the scroll bar in buffers

#+begin_src emacs-lisp
(scroll-bar-mode -1)
#+end_src

**** Enable Column Numbers

#+begin_src emacs-lisp
(column-number-mode +1)
(global-display-line-numbers-mode t)
#+end_src

Don't display line numbers in certain modes

#+begin_src emacs-lisp
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

**** Split and Follow Windows

#+begin_src emacs-lisp
(defun zamlz/split-and-follow-horizontally ()
  "Split window below."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun zamlz/split-and-follow-vertically ()
  "Split window right."
  (interactive)
  (split-window-right)
  (other-window 1))

(global-set-key (kbd "C-x 2") #'zamlz/split-and-follow-horizontally)
(global-set-key (kbd "C-x 3") #'zamlz/split-and-follow-vertically)
#+end_src

**** Backup and Autosave Files

Emacs decides to save backup files and lockfiles within the same directory as the files we are editing. Thats just ugly when looking at the filesystem. This will fix that.

#+begin_src emacs-lisp
(setq create-lockfiles nil) ; don't create .# files (crashes 'npm start')
(setq backup-directory-alist `(("." . "~/.config/emacs/backup")))
#+end_src

**** Eldoc Documentation

Slightly shorten the Eldoc display delay

#+begin_src emacs-lisp
(setq eldoc-idle-delay 0.4)
#+end_src

**** Mouse Wheel Scroll Speed

#+begin_src emacs-lisp
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
#+end_src

**** Highlight Matching Parentheses

#+begin_src emacs-lisp
(setq show-paren-delay 0)
(show-paren-mode +1)
#+end_src

**** Clean Whitespace on Buffer Save

#+begin_src emacs-lisp
(use-package whitespace
  :hook (before-save . whitespace-cleanup))
#+end_src

**** Dump Custom-Set-Variables

#+begin_src emacs-lisp
(setq custom-file (concat user-emacs-directory "to-be-dumped.el"))
#+end_src

**** Easy PGP Assistant (EPA)

EPA is a built-in emacs package for interfacing with GnuPG.

Don't ask by default which key to use

#+begin_src emacs-lisp
(setq epa-file-select-keys nil)
#+end_src

Default to user mail address

#+begin_src emacs-lisp
(setq epa-file-encrypt-to user-mail-address)
#+end_src

Set the pinentry mode to be loopback to gpg gets the password through emacs instead of using pinentry.

#+begin_src emacs-lisp
(setq epa-pinentry-mode 'loopback)
#+end_src

**** Auth Source Pass

The auth-source-pass package, formerly known as auth-password-store, integrates Emacs' auth-source library with password-store. The auth-source library is a way for Emacs to answer the old burning question “What are my user name and password?”. Password-store (or just pass) is a standard unix password manager following the Unix philosophy. More details can be found at [[https://github.com/DamienCassou/auth-source-pass][github:DamienCassou/auth-source-pass]].

#+begin_src emacs-lisp
(use-package auth-source-pass
  :init (auth-source-pass-enable))
#+end_src

**** Calc

#+begin_src emacs-lisp
(use-package calc
  :custom
  (calc-angle-mode 'rad)
  (calc-symbolic-mode t))
#+end_src

** Interface (Reorganize This)
*** Font Configuration

#+begin_src emacs-lisp
;; (defun zamlz/set-font-faces ()
;;   (interactive)
;;   ;; Set default and fixed pitch face
;;   (dolist (face '(default fixed-pitch))
;;     (set-face-attribute `,face nil :font "Iosevka Term" :height 120))
;;   ;; Set the variable pitch face
;;   (set-face-attribute 'variable-pitch nil :font "Arial" :height 120))
#+end_src

Going to copy the font setup that [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][hrs's emacs config]] has for font configuration. We start by setting the default fixed font and setting it for the =default= and =fixed-pitch= faces.

#+begin_src emacs-lisp
(setq zamlz/default-fixed-font "Iosevka Term")
(setq zamlz/default-fixed-font-size 120)
(setq zamlz/current-fixed-font-size zamlz/default-fixed-font-size)

(set-face-attribute 'default nil
                    :family zamlz/default-fixed-font
                    :height zamlz/current-fixed-font-size)
(set-face-attribute 'fixed-pitch nil
                    :family zamlz/default-fixed-font
                    :height zamlz/current-fixed-font-size)
#+end_src

Next, we do the same procedure for the variable width font

#+begin_src emacs-lisp
(setq zamlz/default-variable-font "Libre Baskerville")
(setq zamlz/default-variable-font-size 120)
(setq zamlz/current-variable-font-size zamlz/default-variable-font-size)

(set-face-attribute 'variable-pitch nil
                    :family zamlz/default-variable-font
                    :height zamlz/current-variable-font-size)
#+end_src

With this setup, we can define a set of functions that we will use to update the font size.

#+begin_src emacs-lisp
(setq zamlz/font-change-increment 1.1)

(defun zamlz/set-font-size ()
  "Change default, fixed-pitch, and variable-pitch font sizes to match respective variables."
  (set-face-attribute 'default nil
                      :height zamlz/current-fixed-font-size)
  (set-face-attribute 'fixed-pitch nil
                      :height zamlz/current-fixed-font-size)
  (set-face-attribute 'variable-pitch nil
                      :height zamlz/current-variable-font-size))

(defun zamlz/reset-font-size ()
  "Revert font sizes back to defaults."
  (interactive)
  (setq zamlz/current-fixed-font-size zamlz/default-fixed-font-size)
  (setq zamlz/current-variable-font-size zamlz/default-variable-font-size)
  (zamlz/set-font-size))

(defun zamlz/increase-font-size ()
  "Increase current font sizes by a factor of `zamlz/font-change-increment'."
  (interactive)
  (setq zamlz/current-fixed-font-size
        (ceiling (* zamlz/current-fixed-font-size zamlz/font-change-increment)))
  (setq zamlz/current-variable-font-size
        (ceiling (* zamlz/current-variable-font-size zamlz/font-change-increment)))
  (zamlz/set-font-size))

(defun zamlz/decrease-font-size ()
  "Decrease current font sizes by a factor of `zamlz/font-change-increment', down to a minimum size of 1."
  (interactive)
  (setq zamlz/current-fixed-font-size
        (max 1
             (floor (/ zamlz/current-fixed-font-size zamlz/font-change-increment))))
  (setq zamlz/current-variable-font-size
        (max 1
             (floor (/ zamlz/current-variable-font-size zamlz/font-change-increment))))
  (zamlz/set-font-size))
#+end_src

*** Themes and Appearance
**** Highlight Numbers

#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))
#+end_src

**** Highlight Escape Sequences

#+begin_src emacs-lisp
(use-package highlight-escape-sequences
  :hook (prog-mode . hes-mode))
#+end_src

**** Rainbow Mode

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init (rainbow-mode))
#+end_src

**** Transparency

#+begin_src emacs-lisp
;; Set transparency of emacs
(defun zamlz/set-transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

;; Add the transparency function to my leader keys
(require 'init-general)
(zamlz/leader-keys
  "tx" '(zamlz/set-transparency :which-key "Set transparency"))

;; Set the default transparency
(zamlz/set-transparency 100)
#+end_src

*** Daemon and Client Hooks

#+begin_src emacs-lisp
(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (setq doom-modeline-icon t)
                (with-selected-frame frame
                  (zamlz/reset-font-size)
                  (zamlz/set-transparency 100))))
  (zamlz/reset-font-size))
#+end_src

** Configure System
Before we do anything to crazy, lets load up some system specific settings. Usually this should just contain variable definitions used for other packages to use. Also the contents of this file could be any =system= file. Currently there are only two being managed right now ([[id:41f09830-6fd1-4f9c-8656-44470647c061][Andromeda Workstation]] and Sagitarrius Workstation).

#+begin_src emacs-lisp
(require 'init-system)
#+end_src

** Setup Org-mode
We should also make sure to load up [[id:ef93dff4-b19f-4835-9002-9d4215f8a6fe][Org-mode]] first. This is vital because we don't want any internal package to accidentally load in built-in version.

#+begin_src emacs-lisp
(require 'init-org)
#+end_src

** Load Remaining Modules
Let us import the rest of the modules in whatever order we want.

#+begin_src emacs-lisp
(dolist
    (dir (directory-files (expand-file-name "lisp" user-emacs-directory) nil ".*\\.el"))
  (require (intern (replace-regexp-in-string "\\.el" "" dir))))
#+end_src

** Post Module Configuration
At this point all our modules have been loaded, but there are some settings that we may wish to configure once everything is done loading.

*** Load Theme
We want to select one of the many themes I may have installed here.
List of installed themes:
- [[id:85bb4296-3142-4357-9db3-339a18f05e97][Doom Themes]]
- Gruvbox Black /(my own custom theme I'm working on)/
- [[id:397b3f52-7bc9-4d02-88fa-d7f0665fe556][Modus Themes]]

#+begin_src emacs-lisp
;; (load-theme 'gruvbox-black t)
;; (load-theme 'doom-old-hope t)
;; (load-theme 'doom-nord t)
(modus-themes-load-vivendi)
#+end_src

*** Notetaking Hydra
Let's define a [[id:b9a1f5eb-1da8-4f19-9303-153fdd376962][Major Mode Hydra]] for accessing all notetaking related functions in packages like [[id:e6532b52-0b06-406f-a7ed-89591de98b40][Org-roam]] and [[id:e84b4798-89bd-4bca-adb1-15878b6a8f50][BibTeX Actions]]. We don't need to worry about setting up the dependencies as they will be setup at some point, =hydra= will automatically find them when the function is run.

#+begin_src emacs-lisp
(pretty-hydra-define zamlz/hydra-notes
  (:title "Notetaking Commands" :color blue :quit-key "q" :exit t)
  (
   "Org Roam"
   (("l" org-roam-buffer-toggle "Toggle Roam Buffer")
    ("/" org-roam-node-find "Find Node")
    ("?" org-roam-ref-find "Find Reference")
    ("i" org-roam-node-insert "Insert Node")
    ("I" org-id-get-create "Create node ID"))
   "Metadata"
   (("t" org-roam-tag-add "Tag Add")
    ("T" org-roam-tag-remove "Tag Remove")
    ("a" org-roam-alias-add "Alias Add")
    ("A" org-roam-alias-remove "Alias Remove")
    ("r" org-roam-ref-add "Reference Add")
    ("R" org-roam-ref-remove "Reference Remove"))
   "BibTeX"
   (("b" bibtex-actions-open "Library")
    ("n" bibtex-actions-open-notes "Notes")
    ("p" bibtex-actions-open-pdf "PDF")
    ("L" bibtex-actions-open-link "Open Link")
    ("e" bibtex-actions-open-entry "View Entry"))
   "Journal"
   ()
   "Misc"
   (("P" zamlz/org-toggle-properties "Toggle Properties Drawer")
    ("d" org-roam-db-sync " DB Sync")
    ("!" zamlz/notetaking-system-refresh "Full Refresh"))))
#+end_src

Add the notetaking [[id:b9a1f5eb-1da8-4f19-9303-153fdd376962][Major Mode Hydra]] to [[id:c4e4923e-2180-4a79-baf1-0dcf0f795c41][General Leader Keybindings Definer]].

#+begin_src emacs-lisp
(zamlz/leader-keys
  "n" 'zamlz/hydra-notes/body)
#+end_src

We also create a single function that will refresh all parts of our notetaking system.

#+begin_src emacs-lisp
(defun zamlz/notetaking-system-refresh()
  "Refreshes Org-Roam and Bibtex-Actions"
  (interactive)
  (org-roam-db-sync)
  (bibtex-actions-refresh))
#+end_src

*** Documentation & Help Hydra
Create a [[id:b9a1f5eb-1da8-4f19-9303-153fdd376962][Major Mode Hydra]] for accessing all help documentation super easily and also provide bindings for packages like [[id:9a2fb807-5ab2-4c0d-8c41-b0fda0d8cc7a][Helpful]].

#+begin_src emacs-lisp
(pretty-hydra-define zamlz/hydra-documentation
  (:title "Help & Documentation Commands" :color green :quit-key "q" :exit t)
  ("CMDs/Funcs/Macros"
   (("h" helpful-callable "[ALL]")
    ("c" helpful-command "Command")
    ("f" helpful-function "Function")
    ("m" helpful-macro "Macro"))
  "Variable"
   (("v" helpful-variable "Variable")
    ("V" set-variable "Set Variable")
    ("s" helpful-at-point "Symbol at Point"))
  "Keybindings"
   (("k" helpful-key "Describe Key")
    ("b" embark-bindings "List Bindings"))
   "Documentation"
   (("w" woman "woman"))
   ))
#+end_src

Add the documentation & help [[id:b9a1f5eb-1da8-4f19-9303-153fdd376962][Major Mode Hydra]] to [[id:c4e4923e-2180-4a79-baf1-0dcf0f795c41][General Leader Keybindings Definer]].

#+begin_src emacs-lisp
(zamlz/leader-keys
  "h" 'zamlz/hydra-documentation/body)
#+end_src

* Summon the Daemon
:PROPERTIES:
:header-args:shell: :tangle ~/.config/xinitrc.d/emacs-daemon-refresh.sh :mkdirp yes :shebang #!/bin/sh :comments both
:END:

*Very Important!* Make sure we start the emacs daemon here! But do not start it if it's already running. Add this to the [[id:64c66aeb-1b89-4f51-8e36-2931fb24399a][xinit]] user-level scripts.

#+begin_src shell
if [ -z "$(pgrep -f 'emacs --daemon=xorg-emacs-daemon')" ]; then
    emacs --daemon=xorg-emacs-daemon
fi
#+end_src

* Xresources Setup
:PROPERTIES:
:header-args:C: :tangle ~/.config/xresources.d/emacs :mkdirp yes :comments no
:END:
The colorscheme defined in [[id:560ce224-98e4-4b11-a7d9-fedd64b3fc14][Xresources]] below doesn't actually matter. Emacs will override it anyway when you load our actual colorscheme. *However*, Emacs does in fact load this before rendering the GUI Window where as our actual colorscheme is loaded after the GUI Window is drawn. /Therefore/, this simple setup prevents the blinding white flash from appearing at startup! *Secondly*, if the Emacs config is bricked for some reason, our barebones environment will still be in /dark/ mode.

#+begin_src C
Emacs.foreground: xforeground
Emacs.background: xbackground

Emacs.color0:  xcolor0
Emacs.color1:  xcolor1
Emacs.color2:  xcolor2
Emacs.color3:  xcolor3
Emacs.color4:  xcolor4
Emacs.color5:  xcolor5
Emacs.color6:  xcolor6
Emacs.color7:  xcolor7
Emacs.color8:  xcolor8
Emacs.color9:  xcolor9
Emacs.color10: xcolor10
Emacs.color11: xcolor11
Emacs.color12: xcolor12
Emacs.color13: xcolor13
Emacs.color14: xcolor14
Emacs.color15: xcolor15
#+end_src
