:PROPERTIES:
:ID:       ef93dff4-b19f-4835-9002-9d4215f8a6fe
:ROAM_REFS: https://orgmode.org/
:END:
#+TITLE: Org-mode
#+AUTHOR: Amlesh Sivanantham (zamlz)
#+CREATED: [2021-03-27 Sat 00:18]
#+LAST_MODIFIED: [2021-07-19 Mon 09:43:22]
#+STARTUP: content
#+filetags: CONFIG SOFTWARE EMACS

* Your Life in Plain Text
#+DOWNLOADED: screenshot @ 2021-03-31 18:49:35
[[file:data/org_mode_logo.png]]

Org-mode is a powerful plain text markup language for [[id:cf447557-1f87-4a07-916a-160cfd2310cf][GNU/Emacs]]. You can use it for taking notes, generating to-do-lists, creating research papers, running code, you name it!

* Useful Resources
- [[https://orgmode.org/manual/index.html][The Official Org Manual]]
- [[https://blog.jethro.dev/posts/org_mode_workflow_preview/][Jethro Kuan's Org-mode Workflow]]
- [[https://www.reddit.com/r/orgmode/comments/i2d75e/tracking_my_diet_with_emacs_and_orgmode/][Reddit: Tracking my diet with Emacs and Org-mode]]

* Configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle ~/.config/emacs/lisp/init-org.el :comments both :mkdirp yes
:END:
** Basic Configuration

I should probably split this bloody mess up.

#+begin_src emacs-lisp
(use-package org
  :hook
  (org-mode    . org-indent-mode)
  (org-mode    . zamlz/org-mode-setup)
  ;; (org-mode    . zamlz/org-level-face-setup-simple)
  ;; FANCY MODE
  (org-mode    . variable-pitch-mode)
  (org-mode    . zamlz/org-level-face-setup-fancy)
  (org-mode    . zamlz/org-fixed-pitch-setup-fancy)
  (before-save . zamlz/update-org-modified-property-hook)
  :bind (:map org-mode-map
              ("C-M-h" . org-previous-link)
              ("C-M-l" . org-next-link))
  :custom
  ;; Setup directories
  (org-directory "~/org/gtd/")
  (org-agenda-files (list org-directory))
  ;; Add some nice visuals changes
  ;;(org-ellipsis " ▾")
  (org-ellipsis " ")
  ;; This is so that the imenu displays all levels in ivy
  (org-imenu-depth 6)
  ;; dont use C-c C-o for opening links REEEEEEEEEEEE
  (org-return-follows-link t)
  ;; Some todo/logging changes
  (org-enforce-todo-dependencies t)
  (org-log-done 'time)
  (org-log-into-drawer t)
  (org-treat-S-cursor-todo-selection-as-state-change nil)
  ;; Setup org capture mode
  ;; Setup refiling
  (org-log-refile 'time)
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
  (org-refile-allow-creating-parent-nodes nil)
  ;; TODO: need to figure out how to setup project refile targets
  (org-refile-targets
   `((,(concat org-directory "/tasks.org") :maxlevel . 5)))
  ;; Setup archive location
  (org-archive-location (concat org-directory "/archive.org::"))
  ;; ensure that refiling saves buffers
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
  ;; Inline Image improvements
  (org-startup-with-inline-images t)
  (org-image-actual-width 300)
  ;; Align org tags
  (org-tags-column (* -1 (- zamlz/default-screen-width 10)))
  (org-agenda-tags-column (* -1 zamlz/default-screen-width )))
#+end_src

** Mode Startup Hooks

These are some hooks that we would like to run when =org-mode= is started.

#+begin_src emacs-lisp
(defun zamlz/org-mode-setup ()
  (visual-line-mode +1)
  (setq evil-auto-indent nil)
  (setq fill-column 10000))
#+end_src

** Better Font Faces Hook

We can configure =org-mode= font faces via a seperate function that we define. We need to add it as a hook afterwards however which is why this section appears before the basic configuration.

#+begin_src emacs-lisp
(defun zamlz/org-level-face-setup-fancy ()
  (interactive)
  ;; hide #+TITLE:
  (setq org-hidden-keywords '(title))
  (setq org-fontify-whole-heading-line t)
  (setq org-fontify-done-headline t)
  (setq org-fontify-quote-and-verse-blocks t)
  ;; set basic title font
  (set-face-attribute 'org-level-8 nil :weight 'normal :slant 'italic :inherit 'outline-8)
  ;; Low levels are unimportant => no scaling
  (set-face-attribute 'org-level-7 nil :weight 'normal :slant 'italic :inherit 'outline-7)
  (set-face-attribute 'org-level-6 nil :weight 'normal :slant 'italic :inherit 'outline-6)
  (set-face-attribute 'org-level-5 nil :weight 'normal :slant 'italic :inherit 'outline-5)
  (set-face-attribute 'org-level-4 nil :weight 'normal :slant 'italic :inherit 'outline-4)
  ;; Top ones get scaled the same as in LaTeX (\large, \Large, \LARGE)
  (set-face-attribute 'org-level-3 nil :weight 'normal :slant 'italic :inherit 'outline-3
                      :height 1.2) ;\large
  (set-face-attribute 'org-level-2 nil :weight 'normal :slant 'italic :inherit 'outline-2
                      :height 1.44) ;\Large
  (set-face-attribute 'org-level-1 nil :weight 'normal :slant 'italic :inherit 'outline-1
                      :height 1.728) ;\LARGE
  ;; Only use the first 4 styles and do not cycle.
  (setq org-cycle-level-faces nil)
  (setq org-n-level-faces 4)
  ;; Document Title, (\huge)
  (set-face-attribute 'org-document-title nil
                      :slant 'normal
                      :weight 'normal
                      :height 2.5
                      :underline t
                      :foreground 'unspecified))
#+end_src

Here is an alternate that is simpler.

#+begin_src emacs-lisp
(defun zamlz/org-level-face-setup-simple ()
  (interactive)
  ;; hide #+TITLE:
  (setq org-hidden-keywords '(title))
  (setq org-fontify-whole-heading-line t)
  (setq org-fontify-done-headline t)
  (setq org-fontify-quote-and-verse-blocks t)
  ;; Only use the first 4 styles and do not cycle.
  (setq org-cycle-level-faces t)
  (set-face-attribute 'org-document-title nil
                      :slant 'normal
                      :weight 'normal
                      :height 2.0
                      :underline t
                      :foreground 'unspecified))
#+end_src

Thanks to [[https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/][this blog post]] from Protesliaos, I was able to properly configure variable pitched fonts in these =org-mode= buffers.

#+begin_src emacs-lisp
(defun zamlz/org-fixed-pitch-setup-fancy ()
  (interactive)
  (dolist (face '(org-block
                  org-block-begin-line
                  org-code
                  org-drawer
                  org-special-keyword
                  org-property-value
                  org-document-info-keyword
                  org-meta-line
                  org-table
                  org-formula
                  font-lock-comment-face
                  org-date
                  org-sexp-date
                  org-verbatim))
    (set-face-attribute `,face nil :inherit 'fixed-pitch))
  (set-face-attribute 'org-block-begin-line nil :inherit 'org-block :slant 'italic)
  (set-face-attribute 'org-block-end-line nil :inherit 'org-block-begin-line :slant 'italic))
#+end_src

** Center Org buffers

Center the org buffers and remove line numbers to reduce visual clutter.

#+begin_src emacs-lisp
(defun zamlz/org-mode-visual-fill ()
  (setq visual-fill-column-width zamlz/default-screen-width
        ;; visual-fill-column-extra-text-width (0 . 1000)
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

 (use-package visual-fill-column
   :hook (org-mode . zamlz/org-mode-visual-fill))
#+end_src

** General Keybindings

Just quick access to my most used org-mode functions via the [[id:c4e4923e-2180-4a79-baf1-0dcf0f795c41][General Leader Keybindings Definer]].

#+begin_src emacs-lisp
(require 'init-general)
(zamlz/leader-keys
  "c" '(org-capture :which-key "org-capture")
  "a" '(org-agenda :which-key "org-agenda")
  "o"  '(:ignore t :which-key "Org Mode")
  "ol" '(org-store-link :which-key "org-store-link")
  "oi" '((lambda () (interactive)
           (org-tags-view t "INBOX")
           (message "Opened:  %s" (buffer-name)))
         :which-key "Inbox")
  "og" '((lambda () (interactive)
           (find-file (concat org-directory "/tasks.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "GOTO tasks.org")
  "oj" '((lambda () (interactive)
           (find-file (concat org-directory "/journal.org"))
           (message "Opened:  %s" (buffer-name)))
         :which-key "GOTO journal.org"))
#+end_src

** LaTeX Inline Preview

Pretty straightforward except that you need to have [[id:81f184a7-8c7a-40c7-9384-b7bd117a0e1c][LaTeX]] installed and also =dvipng= as well. We'll add =dvipng= to this file's package set.

#+begin_src emacs-lisp
(setq org-startup-with-latex-preview t)
(setq org-highlight-latex-and-related '(native script entities))
(with-eval-after-load 'org
  (setq org-format-latex-options (plist-put org-format-latex-options
                                            :scale zamlz/org-latex-scale-factor))
  (setq org-preview-latex-image-directory  "/tmp/ltximg/")
  (add-to-list 'org-src-block-faces '("latex" (:inherit default :extend t))))
#+end_src

** Last Modified Timestamp

The following allows any =#+LAST_MODIFIED= headers to be updated on file-save.

#+begin_src emacs-lisp
(defun zamlz/update-org-modified-property-hook ()
  "If an org file contains a '#+LAST_MODIFIED' property,
  update it to contain the current date/time"
  (when (eq major-mode 'org-mode)
    (interactive)
    (save-excursion
      (widen)
      (goto-char (point-min))
      (when (re-search-forward "^#\\+LAST_MODIFIED:" (point-max) t)
        (progn
          (delete-region (point) (save-excursion (move-end-of-line 1) (point)))
          (insert (format-time-string " [%Y-%m-%d %a %H:%M:%S]") ))))))
#+end_src

** Custom Link Types

The variable =org-link-abbrev-alist= provides us a powerful way of defining our own link types to be used within org-mode. Let's define one for Google Maps below. Now to use it, we simply need to type =[[gmap:UCSC, Santa Cruz][UCSC]]= and we'll have a link open up to google maps!

#+begin_src emacs-lisp
(setq org-link-abbrev-alist
      '(("gmap" . "http://maps.google.com/maps?q=%s")))
#+end_src

** Feature Provider

#+begin_src emacs-lisp
(provide 'init-org)
#+end_src
